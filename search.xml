<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SR资料汇总</title>
      <link href="/2019/08/30/sr-sr-ge-wang-zhan-hui-zong/"/>
      <url>/2019/08/30/sr-sr-ge-wang-zhan-hui-zong/</url>
      
        <content type="html"><![CDATA[<h1 id="Awesome-Super-Resolution（in-progress…）"><a href="#Awesome-Super-Resolution（in-progress…）" class="headerlink" title="Awesome-Super-Resolution（in progress…）"></a>Awesome-Super-Resolution（in progress…）</h1><p>collect some super-resolution related papers, datasets, metrics and repositories.</p><p>most of these contents are referenced from <a href="https://github.com/ChaofWang/Awesome-Super-Resolution" target="_blank" rel="noopener">here.</a> Thank you!!!</p><h2 id="1-Important-Repositories"><a href="#1-Important-Repositories" class="headerlink" title="1. Important Repositories"></a>1. Important Repositories</h2><h4 id="1-1-Awesome-paper-list"><a href="#1-1-Awesome-paper-list" class="headerlink" title="1.1 Awesome paper list:"></a>1.1 Awesome paper list:</h4><p><a href="https://paperswithcode.com/task/super-resolution" target="_blank" rel="noopener">Paper with code: Super Resolution</a></p><p><a href="https://github.com/YapengTian/Single-Image-Super-Resolution" target="_blank" rel="noopener">Single-Image-Super-Resolution</a></p><p><a href="https://github.com/huangzehao/Super-Resolution.Benckmark" target="_blank" rel="noopener">Super-Resolution. Benckmark</a></p><p><a href="https://github.com/flyywh/Video-Super-Resolution" target="_blank" rel="noopener">Video-Super-Resolution</a></p><p><a href="https://github.com/LoSealL/VideoSuperResolution" target="_blank" rel="noopener">VideoSuperResolution</a></p><p><a href="https://github.com/ptkin/Awesome-Super-Resolution" target="_blank" rel="noopener">Awesome Super-Resolution</a> </p><h4 id="1-2-Awesome-repos"><a href="#1-2-Awesome-repos" class="headerlink" title="1.2 Awesome repos:"></a>1.2 Awesome repos:</h4><table><thead><tr><th style="text-align:center">repo</th><th style="text-align:center">Framework</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://github.com/thstkdgus35/EDSR-PyTorch" target="_blank" rel="noopener">EDSR-PyTorch</a></td><td style="text-align:center">PyTorch</td></tr><tr><td style="text-align:center"><a href="https://github.com/yulunzhang/RCAN" target="_blank" rel="noopener">RCAN-PyTorch</a></td><td style="text-align:center">PyTorch</td></tr><tr><td style="text-align:center"><a href="https://github.com/xinntao/BasicSR" target="_blank" rel="noopener">BasicSR</a></td><td style="text-align:center">PyTorch</td></tr><tr><td style="text-align:center"><a href="https://github.com/titu1994/Image-Super-Resolution" target="_blank" rel="noopener">Image-Super-Resolution</a></td><td style="text-align:center">Keras</td></tr><tr><td style="text-align:center"><a href="https://github.com/idealo/image-super-resolution" target="_blank" rel="noopener">image-super-resolution</a></td><td style="text-align:center">Keras</td></tr><tr><td style="text-align:center"><a href="https://github.com/WolframRhodium/Super-Resolution-Zoo" target="_blank" rel="noopener">Super-Resolution-Zoo</a></td><td style="text-align:center">MxNet</td></tr><tr><td style="text-align:center"><a href="https://github.com/krasserm/super-resolution" target="_blank" rel="noopener">super-resolution</a></td><td style="text-align:center">Keras</td></tr><tr><td style="text-align:center"><a href="https://github.com/alexjc/neural-enhance" target="_blank" rel="noopener">neural-enhance</a></td><td style="text-align:center">Theano</td></tr><tr><td style="text-align:center"><a href="https://github.com/david-gpu/srez" target="_blank" rel="noopener">srez</a></td><td style="text-align:center">Tensorflow</td></tr><tr><td style="text-align:center"><a href="https://github.com/nagadomi/waifu2x" target="_blank" rel="noopener">waifu2x</a></td><td style="text-align:center">Torch</td></tr><tr><td style="text-align:center"><a href="https://github.com/icpm/super-resolution" target="_blank" rel="noopener">Super-resolution</a></td><td style="text-align:center">PyTorch</td></tr><tr><td style="text-align:center"><a href="https://github.com/LoSealL/VideoSuperResolution" target="_blank" rel="noopener">VideoSuperResolution</a></td><td style="text-align:center">Tensorflow</td></tr><tr><td style="text-align:center"><a href="https://github.com/thangvubk/video-super-resolution" target="_blank" rel="noopener">Video-super-resolution</a></td><td style="text-align:center">PyTorch</td></tr></tbody></table><h4 id="1-3-SR-Metrics"><a href="#1-3-SR-Metrics" class="headerlink" title="1.3 SR Metrics"></a>1.3 SR Metrics</h4><p>Note this table is referenced from <a href="https://github.com/ptkin/Awesome-Super-Resolution" target="_blank" rel="noopener">here</a>.</p><table><thead><tr><th style="text-align:left">Metric</th><th>Papers</th></tr></thead><tbody><tr><td style="text-align:left">MS-SSIM</td><td><strong>Multiscale structural similarity for image quality assessment</strong>, <em>Wang, Zhou; Simoncelli, Eero P.; Bovik, Alan C.</em>, <strong>ACSSC 2003</strong>, [<a href="https://ieeexplore.ieee.org/document/1292216" target="_blank" rel="noopener">ACSSC</a>], <code>MS-SSIM</code></td></tr><tr><td style="text-align:left">SSIM</td><td><strong>Image Quality Assessment: From Error Visibility to Structural Similarity</strong>, <em>Wang, Zhou; Bovik, Alan C.; Sheikh, Hamid R.; Simoncelli, Eero P</em>, <strong>TIP 2004</strong>, [<a href="https://ieeexplore.ieee.org/document/1284395" target="_blank" rel="noopener">TIP</a>], <code>SSIM</code></td></tr><tr><td style="text-align:left">IFC</td><td><strong>An information fidelity criterion for image quality assessment using natural scene statistics</strong>, <em>Sheikh, Hamid Rahim; Bovik, Alan Conrad; de Veciana, Gustavo de Veciana</em>, <strong>TIP 2005</strong>, [<a href="https://ieeexplore.ieee.org/document/1532311/" target="_blank" rel="noopener">TIP</a>], <code>IFC</code></td></tr><tr><td style="text-align:left">VIF</td><td><strong>Image information and visual quality</strong>, <em>Sheikh, Hamid Rahim; Bovik, Alan C.</em>, <strong>TIP 2006</strong>, [<a href="https://ieeexplore.ieee.org/document/1576816" target="_blank" rel="noopener">TIP</a>], <code>VIF</code></td></tr><tr><td style="text-align:left">FSIM</td><td><strong>FSIM: A Feature Similarity Index for Image Quality Assessment</strong>, <em>Zhang, Lin; Zhang, Lei; Mou, Xuanqin; Zhang, David</em>, <strong>TIP 2011</strong>, [<a href="http://www4.comp.polyu.edu.hk/~cslzhang/IQA/FSIM/FSIM.htm" target="_blank" rel="noopener">Project</a>], [<a href="https://ieeexplore.ieee.org/document/5705575" target="_blank" rel="noopener">TIP</a>], <code>FSIM</code></td></tr><tr><td style="text-align:left">NIQE</td><td><strong>Making a “Completely Blind” Image Quality Analyzer</strong>, <em>Mittal, Anish; Soundararajan, Rajiv; Bovik, Alan C.</em>, <strong>Signal Processing Letters 2013</strong>, [<a href="https://github.com/csjunxu/Bovik_NIQE_SPL2013" target="_blank" rel="noopener">Matlab*</a>], [<a href="https://ieeexplore.ieee.org/document/6353522" target="_blank" rel="noopener">Signal Processing Letters</a>], <code>NIQE</code></td></tr><tr><td style="text-align:left">Ma</td><td><strong>Learning a no-reference quality metric for single-image super-resolution</strong>, <em>Ma, Chao; Yang, Chih-Yuan; Yang, Xiaokang; Yang, Ming-Hsuan</em>, <strong>CVIU 2017</strong>, [<a href="https://arxiv.org/abs/1612.05890" target="_blank" rel="noopener">arXiv</a>], [<a href="https://www.sciencedirect.com/science/article/pii/S107731421630203X" target="_blank" rel="noopener">CVIU</a>], [<a href="https://github.com/chaoma99/sr-metric" target="_blank" rel="noopener">Matlab*</a>], [<a href="https://sites.google.com/site/chaoma99/sr-metric" target="_blank" rel="noopener">Project</a>], <code>Ma</code></td></tr></tbody></table><h2 id="2-Datasets"><a href="#2-Datasets" class="headerlink" title="2. Datasets"></a>2. Datasets</h2><p>Note this table is referenced from <a href="https://github.com/LoSealL/VideoSuperResolution#link-of-datasets" target="_blank" rel="noopener">here</a>.</p><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:center">Usage</th><th style="text-align:center">Link</th><th style="text-align:center">Comments</th></tr></thead><tbody><tr><td style="text-align:center">Set5</td><td style="text-align:center">Test</td><td style="text-align:center"><a href="https://uofi.box.com/shared/static/kfahv87nfe8ax910l85dksyl2q212voc.zip" target="_blank" rel="noopener">download</a></td><td style="text-align:center"><a href="https://github.com/jbhuang0604/SelfExSR" target="_blank" rel="noopener">jbhuang0604</a></td></tr><tr><td style="text-align:center">SET14</td><td style="text-align:center">Test</td><td style="text-align:center"><a href="https://uofi.box.com/shared/static/igsnfieh4lz68l926l8xbklwsnnk8we9.zip" target="_blank" rel="noopener">download</a></td><td style="text-align:center"><a href="https://github.com/jbhuang0604/SelfExSR" target="_blank" rel="noopener">jbhuang0604</a></td></tr><tr><td style="text-align:center">BSD100</td><td style="text-align:center">Test</td><td style="text-align:center"><a href="https://uofi.box.com/shared/static/qgctsplb8txrksm9to9x01zfa4m61ngq.zip" target="_blank" rel="noopener">download</a></td><td style="text-align:center"><a href="https://github.com/jbhuang0604/SelfExSR" target="_blank" rel="noopener">jbhuang0604</a></td></tr><tr><td style="text-align:center">Urban100</td><td style="text-align:center">Test</td><td style="text-align:center"><a href="https://uofi.box.com/shared/static/65upg43jjd0a4cwsiqgl6o6ixube6klm.zip" target="_blank" rel="noopener">download</a></td><td style="text-align:center"><a href="https://github.com/jbhuang0604/SelfExSR" target="_blank" rel="noopener">jbhuang0604</a></td></tr><tr><td style="text-align:center">Manga109</td><td style="text-align:center">Test</td><td style="text-align:center"><a href="http://www.manga109.org/ja/index.html" target="_blank" rel="noopener">website</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">SunHay80</td><td style="text-align:center">Test</td><td style="text-align:center"><a href="https://uofi.box.com/shared/static/rirohj4773jl7ef752r330rtqw23djt8.zip" target="_blank" rel="noopener">download</a></td><td style="text-align:center"><a href="https://github.com/jbhuang0604/SelfExSR" target="_blank" rel="noopener">jbhuang0604</a></td></tr><tr><td style="text-align:center">BSD300</td><td style="text-align:center">Train/Val</td><td style="text-align:center"><a href="https://www2.eecs.berkeley.edu/Research/Projects/CS/vision/grouping/segbench/BSDS300-images.tgz" target="_blank" rel="noopener">download</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">BSD500</td><td style="text-align:center">Train/Val</td><td style="text-align:center"><a href="http://www.eecs.berkeley.edu/Research/Projects/CS/vision/grouping/BSR/BSR_bsds500.tgz" target="_blank" rel="noopener">download</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">91-Image</td><td style="text-align:center">Train</td><td style="text-align:center"><a href="http://www.ifp.illinois.edu/~jyang29/codes/ScSR.rar" target="_blank" rel="noopener">download</a></td><td style="text-align:center">Yang</td></tr><tr><td style="text-align:center">DIV2K2017</td><td style="text-align:center">Train/Val</td><td style="text-align:center"><a href="https://data.vision.ee.ethz.ch/cvl/DIV2K/" target="_blank" rel="noopener">website</a></td><td style="text-align:center">NTIRE2017</td></tr><tr><td style="text-align:center">Real SR</td><td style="text-align:center">Train/Val</td><td style="text-align:center"><a href="https://competitions.codalab.org/competitions/21439#participate" target="_blank" rel="noopener">website</a></td><td style="text-align:center">NTIRE2019</td></tr><tr><td style="text-align:center">Waterloo</td><td style="text-align:center">Train</td><td style="text-align:center"><a href="https://ece.uwaterloo.ca/~k29ma/exploration/" target="_blank" rel="noopener">website</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">VID4</td><td style="text-align:center">Test</td><td style="text-align:center"><a href="https://people.csail.mit.edu/celiu/CVPR2011/videoSR.zip" target="_blank" rel="noopener">download</a></td><td style="text-align:center">4 videos</td></tr><tr><td style="text-align:center">MCL-V</td><td style="text-align:center">Train</td><td style="text-align:center"><a href="http://mcl.usc.edu/mcl-v-database/" target="_blank" rel="noopener">website</a></td><td style="text-align:center">12 videos</td></tr><tr><td style="text-align:center">GOPRO</td><td style="text-align:center">Train/Val</td><td style="text-align:center"><a href="https://github.com/SeungjunNah/DeepDeblur_release" target="_blank" rel="noopener">website</a></td><td style="text-align:center">33 videos, deblur</td></tr><tr><td style="text-align:center">CelebA</td><td style="text-align:center">Train</td><td style="text-align:center"><a href="http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html" target="_blank" rel="noopener">website</a></td><td style="text-align:center">Human faces</td></tr><tr><td style="text-align:center">Sintel</td><td style="text-align:center">Train/Val</td><td style="text-align:center"><a href="http://sintel.is.tue.mpg.de/downloads" target="_blank" rel="noopener">website</a></td><td style="text-align:center">Optical flow</td></tr><tr><td style="text-align:center">FlyingChairs</td><td style="text-align:center">Train</td><td style="text-align:center"><a href="https://lmb.informatik.uni-freiburg.de/resources/datasets/FlyingChairs.en.html#flyingchairs" target="_blank" rel="noopener">website</a></td><td style="text-align:center">Optical flow</td></tr><tr><td style="text-align:center">Vimeo-90k</td><td style="text-align:center">Train/Test</td><td style="text-align:center"><a href="http://toflow.csail.mit.edu/" target="_blank" rel="noopener">website</a></td><td style="text-align:center">90k HQ videos</td></tr><tr><td style="text-align:center">SR-RAW</td><td style="text-align:center">Train/Test</td><td style="text-align:center"><a href="https://ceciliavision.github.io/project-pages/project-zoom.html" target="_blank" rel="noopener">website</a></td><td style="text-align:center">raw sensor image dataset</td></tr></tbody></table><h4 id="Dataset-collections"><a href="#Dataset-collections" class="headerlink" title="Dataset collections"></a>Dataset collections</h4><p><a href="https://drive.google.com/drive/folders/1-99XFJs_fvQ2wFdxXrnJFcRRyPJYKN0K" target="_blank" rel="noopener">Benckmark and DIV2K</a>: Set5, Set14, B100, Urban100, Manga109, DIV2K2017 include bicubic downsamples with x2,3,4,8</p><p><a href="https://www.kaggle.com/msahebi/super-resolution#SR_testing_datasets.zip" target="_blank" rel="noopener">SR_testing_datasets</a>: Test: Set5, Set14, B100, Urban100, Manga109, Historical; Train: T91,General100, BSDS200</p><h2 id="3-Papers"><a href="#3-Papers" class="headerlink" title="3. Papers"></a>3. Papers</h2><h4 id="3-1-Non-DL-based-approach"><a href="#3-1-Non-DL-based-approach" class="headerlink" title="3.1 Non-DL based approach"></a>3.1 Non-DL based approach</h4><p>SCSR: TIP2010, Jianchao Yang et al.<a href="https://ieeexplore.ieee.org/document/5466111/?arnumber=5466111" target="_blank" rel="noopener">paper</a>, <a href="http://www.ifp.illinois.edu/~jyang29/" target="_blank" rel="noopener">code</a></p><p>ANR: ICCV2013, Radu Timofte et al. <a href="http://www.vision.ee.ethz.ch/~timofter/publications/Timofte-ICCV-2013.pdf" target="_blank" rel="noopener">paper</a>, <a href="http://www.vision.ee.ethz.ch/~timofter/ICCV2013_ID1774_SUPPLEMENTARY/index.html" target="_blank" rel="noopener">code</a></p><p>A+: ACCV 2014, Radu Timofte et al. <a href="http://www.vision.ee.ethz.ch/~timofter/publications/Timofte-ACCV-2014.pdf" target="_blank" rel="noopener">paper</a>, <a href="http://www.vision.ee.ethz.ch/~timofter/ACCV2014_ID820_SUPPLEMENTARY/" target="_blank" rel="noopener">code</a></p><p>IA: CVPR2016, Radu Timofte et al. <a href="http://www.vision.ee.ethz.ch/~timofter/publications/Timofte-CVPR-2016.pdf" target="_blank" rel="noopener">paper</a></p><p>SelfExSR: CVPR2015, Jia-Bin Huang et al. <a href="https://uofi.box.com/shared/static/8llt4ijgc39n3t7ftllx7fpaaqi3yau0.pdf" target="_blank" rel="noopener">paper</a>, <a href="https://github.com/jbhuang0604/SelfExSR" target="_blank" rel="noopener">code</a></p><p>NBSRF: ICCV2015, Jordi Salvador et al. <a href="https://www.cv-foundation.org/openaccess/content_iccv_2015/papers/Salvador_Naive_Bayes_Super-Resolution_ICCV_2015_paper.pdf" target="_blank" rel="noopener">paper</a></p><p>RFL: ICCV2015, Samuel Schulter et al <a href="https://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Schulter_Fast_and_Accurate_2015_CVPR_paper.pdf" target="_blank" rel="noopener">paper</a>, <a href="https://www.tugraz.at/institute/icg/research/team-bischof/samuel-schulter/" target="_blank" rel="noopener">code</a></p><h4 id="3-2-DL-based-approach"><a href="#3-2-DL-based-approach" class="headerlink" title="3.2 DL based approach"></a>3.2 DL based approach</h4><p>Note this table is referenced from <a href="https://github.com/LoSealL/VideoSuperResolution/blob/master/README.md#network-list-and-reference-updating" target="_blank" rel="noopener">here</a></p><table><thead><tr><th>Model</th><th>Published</th><th>Code</th><th>Keywords</th></tr></thead><tbody><tr><td>SRCNN</td><td><a href="https://arxiv.org/abs/1501.00092" target="_blank" rel="noopener">ECCV14</a></td><td><a href="https://github.com/qobilidop/srcnn" target="_blank" rel="noopener">Keras</a></td><td>CNN</td></tr><tr><td>RAISR</td><td><a href="https://arxiv.org/abs/1606.01299" target="_blank" rel="noopener">arXiv</a></td><td>-</td><td>Google, Pixel 3</td></tr><tr><td>ESPCN</td><td><a href="https://arxiv.org/abs/1609.05158" target="_blank" rel="noopener">CVPR16</a></td><td><a href="https://github.com/qobilidop/srcnn" target="_blank" rel="noopener">Keras</a></td><td>Real time/SISR/<strong>VideoSR</strong></td></tr><tr><td>VDSR</td><td><a href="https://arxiv.org/abs/1511.04587" target="_blank" rel="noopener">CVPR16</a></td><td><a href="http://cv.snu.ac.kr/research/VDSR/" target="_blank" rel="noopener">Matlab</a></td><td>Deep, Residual</td></tr><tr><td>DRCN</td><td><a href="https://arxiv.org/abs/1511.04491" target="_blank" rel="noopener">CVPR16</a></td><td><a href="http://cv.snu.ac.kr/research/DRCN/" target="_blank" rel="noopener">Matlab</a></td><td>Recurrent</td></tr><tr><td>DRRN</td><td><a href="http://cvlab.cse.msu.edu/pdfs/Tai_Yang_Liu_CVPR2017.pdf" target="_blank" rel="noopener">CVPR17</a></td><td><a href="https://github.com/tyshiwo/DRRN_CVPR17" target="_blank" rel="noopener">Caffe</a>, <a href="https://github.com/jt827859032/DRRN-pytorch" target="_blank" rel="noopener">PyTorch</a></td><td>Recurrent</td></tr><tr><td>LapSRN</td><td><a href="http://vllab.ucmerced.edu/wlai24/LapSRN/" target="_blank" rel="noopener">CVPR17</a></td><td><a href="https://github.com/phoenix104104/LapSRN" target="_blank" rel="noopener">Matlab</a></td><td>Huber loss</td></tr><tr><td>IRCNN</td><td><a href="http://openaccess.thecvf.com/content_cvpr_2017/papers/Zhang_Learning_Deep_CNN_CVPR_2017_paper.pdf" target="_blank" rel="noopener">CVPR17</a></td><td><a href="https://github.com/cszn/IRCNN" target="_blank" rel="noopener">Matlab</a></td><td></td></tr><tr><td>EDSR</td><td><a href="https://arxiv.org/abs/1707.02921" target="_blank" rel="noopener">CVPR17</a></td><td><a href="https://github.com/thstkdgus35/EDSR-PyTorch" target="_blank" rel="noopener">PyTorch</a></td><td>NTIRE17 Champion</td></tr><tr><td>BTSRN</td><td><a href="http://openaccess.thecvf.com/content_cvpr_2017_workshops/w12/papers/Fan_Balanced_Two-Stage_Residual_CVPR_2017_paper.pdf" target="_blank" rel="noopener">CVPR17</a></td><td>-</td><td>NTIRE17</td></tr><tr><td>SelNet</td><td><a href="https://ieeexplore.ieee.org/document/8014887" target="_blank" rel="noopener">CVPR17</a></td><td>-</td><td>NTIRE17</td></tr><tr><td>TLSR</td><td><a href="http://openaccess.thecvf.com/content_cvpr_2017_workshops/w12/papers/Xu_Fast_and_Accurate_CVPR_2017_paper.pdf" target="_blank" rel="noopener">CVPR17</a></td><td>-</td><td>NTIRE17</td></tr><tr><td>SRGAN</td><td><a href="https://arxiv.org/abs/1609.04802" target="_blank" rel="noopener">CVPR17</a></td><td><a href="https://github.com/tensorlayer/srgan" target="_blank" rel="noopener">Tensorflow</a></td><td>1st proposed GAN</td></tr><tr><td>VESPCN</td><td><a href="https://arxiv.org/abs/1611.05250" target="_blank" rel="noopener">CVPR17</a></td><td>-</td><td><strong>VideoSR</strong></td></tr><tr><td>MemNet</td><td><a href="https://arxiv.org/abs/1708.02209" target="_blank" rel="noopener">ICCV17</a></td><td><a href="https://github.com/tyshiwo/MemNet" target="_blank" rel="noopener">Caffe</a></td><td>Dense &amp;&amp; Recurrent</td></tr><tr><td>SRDenseNet</td><td><a href="http://openaccess.thecvf.com/content_ICCV_2017/papers/Tong_Image_Super-Resolution_Using_ICCV_2017_paper.pdf" target="_blank" rel="noopener">ICCV17</a></td><td>-, <a href="https://github.com/wxywhu/SRDenseNet-pytorch" target="_blank" rel="noopener">PyTorch</a></td><td>Dense</td></tr><tr><td>SPMC</td><td><a href="https://arxiv.org/abs/1704.02738" target="_blank" rel="noopener">ICCV17</a></td><td><a href="https://github.com/jiangsutx/SPMC_VideoSR" target="_blank" rel="noopener">Tensorflow</a></td><td><strong>VideoSR</strong></td></tr><tr><td>EnhanceNet</td><td><a href="https://arxiv.org/abs/1612.07919" target="_blank" rel="noopener">ICCV17</a></td><td><a href="https://github.com/msmsajjadi/EnhanceNet-Code" target="_blank" rel="noopener">TensorFlow</a></td><td>Perceptual Loss</td></tr><tr><td>PRSR</td><td><a href="http://openaccess.thecvf.com/content_ICCV_2017/papers/Dahl_Pixel_Recursive_Super_ICCV_2017_paper.pdf" target="_blank" rel="noopener">ICCV17</a></td><td><a href="https://github.com/nilboy/pixel-recursive-super-resolution" target="_blank" rel="noopener">TensorFlow</a></td><td>an extension of PixelCNN</td></tr><tr><td>AffGAN</td><td><a href="https://arxiv.org/pdf/1610.04490.pdf" target="_blank" rel="noopener">ICLR17</a></td><td>-</td><td></td></tr><tr><td>MS-LapSRN</td><td><a href="https://ieeexplore.ieee.org/document/8434354" target="_blank" rel="noopener">TPAMI18</a></td><td><a href="https://github.com/phoenix104104/LapSRN" target="_blank" rel="noopener">Matlab</a></td><td>Fast LapSRN</td></tr><tr><td>DCSCN</td><td><a href="https://arxiv.org/abs/1707.05425" target="_blank" rel="noopener">arXiv</a></td><td><a href="https://github.com/jiny2001/dcscn-super-resolution" target="_blank" rel="noopener">Tensorflow</a></td><td></td></tr><tr><td>IDN</td><td><a href="https://arxiv.org/abs/1803.09454" target="_blank" rel="noopener">CVPR18</a></td><td><a href="https://github.com/Zheng222/IDN-Caffe" target="_blank" rel="noopener">Caffe</a></td><td>Fast</td></tr><tr><td>DSRN</td><td><a href="http://openaccess.thecvf.com/content_cvpr_2018/papers/Han_Image_Super-Resolution_via_CVPR_2018_paper.pdf" target="_blank" rel="noopener">CVPR18</a></td><td><a href="https://github.com/WeiHan3/dsrn/tree/db21d57dfab57de3608f0372e749c6488b6b305d" target="_blank" rel="noopener">TensorFlow</a></td><td>Dual state &amp;&amp; Recurrent</td></tr><tr><td>RDN</td><td><a href="https://arxiv.org/abs/1802.08797" target="_blank" rel="noopener">CVPR18</a></td><td><a href="https://github.com/yulunzhang/RDN" target="_blank" rel="noopener">Torch</a></td><td>Deep &amp;&amp; BI-BD-DN &amp;&amp; Dense</td></tr><tr><td>SRMD</td><td><a href="https://arxiv.org/abs/1712.06116" target="_blank" rel="noopener">CVPR18</a></td><td><a href="https://github.com/cszn/SRMD" target="_blank" rel="noopener">Matlab</a></td><td>Denoise/Deblur/SR</td></tr><tr><td>xUnit</td><td><a href="http://openaccess.thecvf.com/content_cvpr_2018/papers/Kligvasser_xUnit_Learning_a_CVPR_2018_paper.pdf" target="_blank" rel="noopener">CVPR18</a></td><td><a href="https://github.com/kligvasser/xUnit" target="_blank" rel="noopener">PyTorch</a></td><td>Spatial Activation Function</td></tr><tr><td>DBPN</td><td><a href="https://arxiv.org/abs/1803.02735" target="_blank" rel="noopener">CVPR18</a></td><td><a href="https://github.com/alterzero/DBPN-Pytorch" target="_blank" rel="noopener">PyTorch</a></td><td>NTIRE18 Champion</td></tr><tr><td>WDSR</td><td><a href="https://arxiv.org/abs/1808.08718" target="_blank" rel="noopener">CVPR18</a></td><td><a href="https://github.com/JiahuiYu/wdsr_ntire2018" target="_blank" rel="noopener">PyTorch</a>，<a href="https://github.com/ychfan/tf_estimator_barebone/blob/master/docs/super_resolution.md" target="_blank" rel="noopener">TensorFlow</a></td><td>NTIRE18 Champion</td></tr><tr><td>ProSRN</td><td><a href="https://arxiv.org/abs/1804.02900" target="_blank" rel="noopener">CVPR18</a></td><td><a href="https://github.com/fperazzi/proSR" target="_blank" rel="noopener">PyTorch</a></td><td>NTIRE18  &amp;&amp; Progressive</td></tr><tr><td>ZSSR</td><td><a href="http://www.wisdom.weizmann.ac.il/~vision/zssr/" target="_blank" rel="noopener">CVPR18</a></td><td><a href="https://github.com/assafshocher/ZSSR" target="_blank" rel="noopener">Tensorflow</a></td><td>Zero-shot</td></tr><tr><td>FRVSR</td><td><a href="https://arxiv.org/abs/1801.04590" target="_blank" rel="noopener">CVPR18</a></td><td><a href="https://github.com/msmsajjadi/FRVSR" target="_blank" rel="noopener">PDF</a></td><td><strong>VideoSR</strong></td></tr><tr><td>DUF</td><td><a href="http://openaccess.thecvf.com/content_cvpr_2018/papers/Jo_Deep_Video_Super-Resolution_CVPR_2018_paper.pdf" target="_blank" rel="noopener">CVPR18</a></td><td><a href="https://github.com/yhjo09/VSR-DUF" target="_blank" rel="noopener">Tensorflow</a></td><td><strong>VideoSR</strong></td></tr><tr><td>TDAN</td><td><a href="https://arxiv.org/pdf/1812.02898.pdf" target="_blank" rel="noopener">arXiv</a></td><td>-</td><td><strong>VideoSR</strong> &amp;&amp; Deformable Align</td></tr><tr><td>SFTGAN</td><td><a href="https://arxiv.org/abs/1804.02815" target="_blank" rel="noopener">CVPR18</a></td><td><a href="https://github.com/xinntao/SFTGAN" target="_blank" rel="noopener">PyTorch</a></td><td></td></tr><tr><td>CARN</td><td><a href="https://arxiv.org/abs/1803.08664" target="_blank" rel="noopener">ECCV18</a></td><td><a href="https://github.com/nmhkahn/CARN-pytorch" target="_blank" rel="noopener">PyTorch</a></td><td>Lightweight</td></tr><tr><td>RCAN</td><td><a href="https://arxiv.org/abs/1807.02758" target="_blank" rel="noopener">ECCV18</a></td><td><a href="https://github.com/yulunzhang/RCAN" target="_blank" rel="noopener">PyTorch</a></td><td>Deep &amp;&amp; BI-BD-DN &amp;&amp; Channel-wise Attention</td></tr><tr><td>MSRN</td><td><a href="http://openaccess.thecvf.com/content_ECCV_2018/papers/Juncheng_Li_Multi-scale_Residual_Network_ECCV_2018_paper.pdf" target="_blank" rel="noopener">ECCV18</a></td><td><a href="https://github.com/MIVRC/MSRN-PyTorch" target="_blank" rel="noopener">PyTorch</a></td><td>Multi-scale</td></tr><tr><td>SRFeat</td><td><a href="http://openaccess.thecvf.com/content_ECCV_2018/papers/Seong-Jin_Park_SRFeat_Single_Image_ECCV_2018_paper.pdf" target="_blank" rel="noopener">ECCV18</a></td><td><a href="https://github.com/HyeongseokSon1/SRFeat" target="_blank" rel="noopener">Tensorflow</a></td><td>GAN</td></tr><tr><td>TSRN</td><td><a href="https://arxiv.org/pdf/1808.00043.pdf" target="_blank" rel="noopener">ECCV18</a></td><td><a href="https://github.com/waleedgondal/Texture-based-Super-Resolution-Network" target="_blank" rel="noopener">Pytorch</a></td><td></td></tr><tr><td>ESRGAN</td><td><a href="https://arxiv.org/abs/1809.00219" target="_blank" rel="noopener">ECCV18</a></td><td><a href="https://github.com/xinntao/ESRGAN" target="_blank" rel="noopener">PyTorch</a></td><td>PRIM18 region 3 Champion</td></tr><tr><td>EPSR</td><td><a href="http://openaccess.thecvf.com/content_ECCVW_2018/papers/11133/Vasu_Analyzing_Perception-Distortion_Tradeoff_using_Enhanced_Perceptual_Super-resolution_Network_ECCVW_2018_paper.pdf" target="_blank" rel="noopener">ECCV18</a></td><td><a href="https://github.com/subeeshvasu/2018_subeesh_epsr_eccvw" target="_blank" rel="noopener">PyTorch</a></td><td>PRIM18 region 1 Champion</td></tr><tr><td>PESR</td><td><a href="http://openaccess.thecvf.com/content_ECCVW_2018/papers/11133/Vu_Perception-Enhanced_Image_Super-Resolution_via_Relativistic_Generative_Adversarial_Networks_ECCVW_2018_paper.pdf" target="_blank" rel="noopener">ECCV18</a></td><td><a href="https://github.com/thangvubk/PESR" target="_blank" rel="noopener">PyTorch</a></td><td>ECCV18 workshop</td></tr><tr><td>FEQE</td><td><a href="http://openaccess.thecvf.com/content_ECCVW_2018/papers/11133/Vu_Fast_and_Efficient_Image_Quality_Enhancement_via_Desubpixel_Convolutional_Neural_ECCVW_2018_paper.pdf" target="_blank" rel="noopener">ECCV18</a></td><td><a href="https://github.com/thangvubk/FEQE" target="_blank" rel="noopener">Tensorflow</a></td><td>Fast</td></tr><tr><td>NLRN</td><td><a href="https://papers.nips.cc/paper/7439-non-local-recurrent-network-for-image-restoration.pdf" target="_blank" rel="noopener">NIPS18</a></td><td><a href="https://github.com/Ding-Liu/NLRN" target="_blank" rel="noopener">Tensorflow</a></td><td>Non-local, Recurrent</td></tr><tr><td>SRCliqueNet</td><td><a href="https://arxiv.org/abs/1809.04508" target="_blank" rel="noopener">NIPS18</a></td><td>-</td><td>Wavelet</td></tr><tr><td>CBDNet</td><td><a href="https://arxiv.org/abs/1807.04686" target="_blank" rel="noopener">arXiv</a></td><td><a href="https://github.com/GuoShi28/CBDNet" target="_blank" rel="noopener">Matlab</a></td><td>Blind-denoise</td></tr><tr><td>TecoGAN</td><td><a href="http://arxiv.org/abs/1811.09393" target="_blank" rel="noopener">arXiv</a></td><td><a href="https://github.com/thunil/TecoGAN" target="_blank" rel="noopener">Tensorflow</a></td><td><strong>VideoSR</strong> GAN</td></tr><tr><td>RBPN</td><td><a href="https://arxiv.org/abs/1903.10128" target="_blank" rel="noopener">CVPR19</a></td><td><a href="https://github.com/alterzero/RBPN-PyTorch" target="_blank" rel="noopener">PyTorch</a></td><td><strong>VideoSR</strong></td></tr><tr><td>SRFBN</td><td><a href="https://arxiv.org/abs/1903.09814" target="_blank" rel="noopener">CVPR19</a></td><td><a href="https://github.com/Paper99/SRFBN_CVPR19" target="_blank" rel="noopener">PyTorch</a></td><td>Feedback &amp;&amp; Recurrent</td></tr><tr><td>AdaFM</td><td><a href="https://arxiv.org/pdf/1904.08118.pdf" target="_blank" rel="noopener">CVPR19</a></td><td><a href="https://github.com/hejingwenhejingwen/AdaFM" target="_blank" rel="noopener">PyTorch</a></td><td>Adaptive Feature Modification Layers</td></tr><tr><td>MoreMNAS</td><td><a href="https://arxiv.org/pdf/1901.01074.pdf" target="_blank" rel="noopener">arXiv</a></td><td>-</td><td>Lightweight，NAS</td></tr><tr><td>FALSR</td><td><a href="https://arxiv.org/pdf/1901.07261.pdf" target="_blank" rel="noopener">arXiv</a></td><td><a href="https://ieeexplore.ieee.org/document/8434354" target="_blank" rel="noopener">TensorFlow</a></td><td>Lightweight，NAS</td></tr><tr><td>Meta-SR</td><td><a href="https://arxiv.org/pdf/1903.00875.pdf" target="_blank" rel="noopener">CVPR19</a></td><td><a href="https://github.com/XuecaiHu/Meta-SR-Pytorch" target="_blank" rel="noopener">PyTorch</a></td><td>Arbitrary Magnification</td></tr><tr><td>AWSRN</td><td><a href="https://arxiv.org/abs/1904.02358" target="_blank" rel="noopener">arXiv</a></td><td><a href="https://github.com/ChaofWang/AWSRN" target="_blank" rel="noopener">PyTorch</a></td><td>Lightweight</td></tr><tr><td>OISR</td><td><a href="http://openaccess.thecvf.com/content_CVPR_2019/papers/He_ODE-Inspired_Network_Design_for_Single_Image_Super-Resolution_CVPR_2019_paper.pdf" target="_blank" rel="noopener">CVPR19</a></td><td><a href="https://github.com/HolmesShuan/OISR-PyTorch" target="_blank" rel="noopener">PyTorch</a></td><td>ODE-inspired Network</td></tr><tr><td>DPSR</td><td><a href="https://arxiv.org/pdf/1903.12529.pdf" target="_blank" rel="noopener">CVPR19</a></td><td><a href="https://github.com/cszn/DPSR" target="_blank" rel="noopener">PyTorch</a></td><td></td></tr><tr><td>DNI</td><td><a href="https://arxiv.org/pdf/1811.10515.pdf" target="_blank" rel="noopener">CVPR19</a></td><td><a href="https://github.com/xinntao/DNI" target="_blank" rel="noopener">PyTorch</a></td><td></td></tr><tr><td>MAANet</td><td><a href="https://arxiv.org/abs/1904.06252" target="_blank" rel="noopener">arXiv</a></td><td></td><td>Multi-view Aware Attention</td></tr><tr><td>RNAN</td><td><a href="https://openreview.net/pdf?id=HkeGhoA5FX" target="_blank" rel="noopener">ICLR19</a></td><td><a href="https://github.com/yulunzhang/RNAN" target="_blank" rel="noopener">PyTorch</a></td><td>Residual Non-local Attention</td></tr><tr><td>FSTRN</td><td><a href="https://arxiv.org/pdf/1904.02870.pdf" target="_blank" rel="noopener">CVPR19</a></td><td>-</td><td><strong>VideoSR</strong>, fast spatio-temporal residual block</td></tr><tr><td>MsDNN</td><td><a href="https://arxiv.org/pdf/1904.10698.pdf" target="_blank" rel="noopener">arXiv</a></td><td><a href="https://github.com/shangqigao/gsq-image-SR" target="_blank" rel="noopener">TensorFlow</a></td><td>NTIRE19  real SR  21th place</td></tr><tr><td>SAN</td><td><a href="http://www4.comp.polyu.edu.hk/~cslzhang/paper/CVPR19-SAN.pdf" target="_blank" rel="noopener">CVPR19</a></td><td><a href="https://github.com/daitao/SAN" target="_blank" rel="noopener">Pytorch</a></td><td>Second-order Attention, cvpr19 oral</td></tr><tr><td>EDVR</td><td><a href="https://arxiv.org/pdf/1905.02716.pdf" target="_blank" rel="noopener">CVPRW19</a></td><td><a href="https://github.com/xinntao/EDVR" target="_blank" rel="noopener">Pytorch</a></td><td><strong>Video</strong>, NTIRE19 video restoration and enhancement champions</td></tr><tr><td>Ensemble for VSR</td><td><a href="https://arxiv.org/pdf/1905.02462.pdf" target="_blank" rel="noopener">CVPRW19</a></td><td>-</td><td><strong>VideoSR</strong>, NTIRE19 video SR 2nd place</td></tr><tr><td>TENet</td><td><a href="https://arxiv.org/pdf/1905.02538.pdf" target="_blank" rel="noopener">arXiv</a></td><td><a href="https://github.com/guochengqian/TENet" target="_blank" rel="noopener">Pytorch</a></td><td>a Joint Solution for Demosaicking, Denoising and Super-Resolution</td></tr><tr><td>MCAN</td><td><a href="https://arxiv.org/pdf/1903.07949.pdf" target="_blank" rel="noopener">arXiv</a></td><td><a href="https://github.com/macn3388/MCAN" target="_blank" rel="noopener">Pytorch</a></td><td>Matrix-in-matrix CAN, Lightweight</td></tr><tr><td>IKC&amp;SFTMD</td><td><a href="https://arxiv.org/pdf/1904.03377.pdf" target="_blank" rel="noopener">CVPR19</a></td><td>-</td><td>Blind Super-Resolution</td></tr><tr><td>SRNTT</td><td><a href="https://arxiv.org/pdf/1903.00834.pdf" target="_blank" rel="noopener">CVPR19</a></td><td><a href="https://github.com/ZZUTK/SRNTT" target="_blank" rel="noopener">TensorFlow</a></td><td>Neural Texture Transfer</td></tr><tr><td>RawSR</td><td><a href="https://arxiv.org/pdf/1905.12156.pdf" target="_blank" rel="noopener">CVPR19</a></td><td><a href="https://drive.google.com/file/d/1yvCceNAgt4UsxZXahPFBkuL1JXyfgr8B/view" target="_blank" rel="noopener">TensorFlow</a></td><td>Real Scene Super-Resolution, Raw Images</td></tr><tr><td>resLF</td><td><a href="http://openaccess.thecvf.com/content_CVPR_2019/papers/Zhang_Residual_Networks_for_Light_Field_Image_Super-Resolution_CVPR_2019_paper.pdf" target="_blank" rel="noopener">CVPR19</a></td><td></td><td>Light field</td></tr><tr><td>CameraSR</td><td><a href="http://openaccess.thecvf.com/content_CVPR_2019/papers/Chen_Camera_Lens_Super-Resolution_CVPR_2019_paper.pdf" target="_blank" rel="noopener">CVPR19</a></td><td></td><td>realistic image SR</td></tr><tr><td>ORDSR</td><td><a href="https://arxiv.org/pdf/1904.10082.pdf" target="_blank" rel="noopener">TIP</a></td><td><a href="https://github.com/tT0NG/ORDSR" target="_blank" rel="noopener">model</a></td><td>DCT domain SR</td></tr><tr><td>U-Net</td><td><a href="https://arxiv.org/pdf/1906.04809.pdf" target="_blank" rel="noopener">CVPRW19</a></td><td></td><td>NTIRE19  real SR  2nd place, U-Net,MixUp,Synthesis</td></tr><tr><td>DRLN</td><td><a href="https://arxiv.org/pdf/1906.12021.pdf" target="_blank" rel="noopener">arxiv</a></td><td></td><td>Densely Residual Laplacian Super-Resolution</td></tr><tr><td>EDRN</td><td><a href="http://openaccess.thecvf.com/content_CVPRW_2019/papers/NTIRE/Cheng_Encoder-Decoder_Residual_Network_for_Real_Super-Resolution_CVPRW_2019_paper.pdf" target="_blank" rel="noopener">CVPRW19</a></td><td><a href="https://github.com/yyknight/NTIRE2019_EDRN" target="_blank" rel="noopener">Pytorch</a></td><td>NTIRE19  real SR  9th places</td></tr><tr><td>FC2N</td><td><a href="https://arxiv.org/pdf/1907.03221.pdf" target="_blank" rel="noopener">arXiv</a></td><td></td><td>Fully Channel-Concatenated</td></tr><tr><td>GMFN</td><td><a href="https://arxiv.org/pdf/1907.04253.pdf" target="_blank" rel="noopener">BMVC2019</a></td><td><a href="https://github.com/liqilei/GMFN" target="_blank" rel="noopener">Pytorch</a></td><td>Gated Multiple Feedback</td></tr><tr><td>CNN&amp;TV-TV Minimization</td><td><a href="https://arxiv.org/pdf/1907.05380.pdf" target="_blank" rel="noopener">BMVC2019</a></td><td></td><td>TV-TV Minimization</td></tr><tr><td>HRAN</td><td><a href="https://arxiv.org/pdf/1907.05514.pdf" target="_blank" rel="noopener">arXiv</a></td><td></td><td>Hybrid Residual Attention Network</td></tr><tr><td>PPON</td><td><a href="https://arxiv.org/pdf/1907.10399.pdf" target="_blank" rel="noopener">arXiv</a></td><td><a href="https://github.com/Zheng222/PPON" target="_blank" rel="noopener">code</a></td><td>Progressive Perception-Oriented Network</td></tr><tr><td>SROBB</td><td><a href="https://arxiv.org/pdf/1908.07222.pdf" target="_blank" rel="noopener">ICCV19</a></td><td></td><td>Targeted Perceptual Loss</td></tr><tr><td>RankSRGAN</td><td><a href="https://arxiv.org/pdf/1908.06382.pdf" target="_blank" rel="noopener">ICCV19</a></td><td><a href="https://github.com/WenlongZhang0724/RankSRGAN" target="_blank" rel="noopener">PyTorch</a></td><td>oral, rank-content loss</td></tr></tbody></table><h4 id="3-3-Super-Resolution-survey："><a href="#3-3-Super-Resolution-survey：" class="headerlink" title="3.3 Super Resolution survey："></a>3.3 Super Resolution survey：</h4><p>[1] Wenming Yang, Xuechen Zhang, Yapeng Tian, Wei Wang, Jing-Hao Xue. Deep Learning for Single Image Super-Resolution: A Brief Review. arxiv, 2018. <a href="https://arxiv.org/pdf/1808.03344.pdf" target="_blank" rel="noopener">paper</a></p><p>[2]Saeed Anwar, Salman Khan, Nick Barnes. A Deep Journey into Super-resolution: A survey. arxiv, 2019.<a href="https://arxiv.org/pdf/1904.07523.pdf" target="_blank" rel="noopener">paper</a></p><p>[3]Wang, Z., Chen, J., &amp; Hoi, S. C. (2019). Deep learning for image super-resolution: A survey. arXiv preprint arXiv:1902.06068.<a href="https://arxiv.org/abs/1902.06068" target="_blank" rel="noopener">paper</a></p><h4 id="3-4-NTIRE"><a href="#3-4-NTIRE" class="headerlink" title="3.4 NTIRE:"></a>3.4 NTIRE:</h4><p>NTIRE17 <a href="http://openaccess.thecvf.com/CVPR2017_workshops/CVPR2017_W12.py" target="_blank" rel="noopener">papers</a></p><p>NTIRE18 <a href="http://openaccess.thecvf.com/CVPR2018_workshops/CVPR2018_W13.py" target="_blank" rel="noopener">papers</a></p><p>NTIRE19 <a href="http://openaccess.thecvf.com/CVPR2019_workshops/CVPR2019_NTIRE.py" target="_blank" rel="noopener">papers</a></p><h2 id="4-Excellent-personal-website"><a href="#4-Excellent-personal-website" class="headerlink" title="4. Excellent  personal website:"></a>4. Excellent  personal website:</h2><p><a href="https://manricheon.github.io/" target="_blank" rel="noopener">Manri Cheon</a></p><p><a href="http://yulunzhang.com/" target="_blank" rel="noopener">Yulun Zhang</a></p><p><a href="http://yapengtian.org/" target="_blank" rel="noopener">Yapeng Tian</a></p><p><a href="https://xinntao.github.io/" target="_blank" rel="noopener">Xintao Wang</a></p>]]></content>
      
      
      <categories>
          
          <category> SR </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Attention Mechanism</title>
      <link href="/2019/06/09/ji-zhu-attention-mechanism/"/>
      <url>/2019/06/09/ji-zhu-attention-mechanism/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>SR中普遍使用的注意力机制可以被分为两种类型，channel attention（CA）和 spatial attention（SA)，具体的操作又可以被分为以下三中操作。</p><p><strong><em>squeeze</em></strong></p><ul><li>it is a process to extract one or more statistics S by the channel (CA) or spatial region (SA) from X. The statistics are extracted by using <strong>pooling methods</strong>, and <strong>1 × 1</strong> convolution can be used for SA .</li></ul><p><strong><em>excitation</em></strong></p><ul><li>using the extracted statistics, the excitation process captures the interrelationship between channels (CA) or spatial regions (SA) and generates an attention map M, having a size of <strong>1 × 1 × C</strong> (CA) or <strong>H × W × 1</strong> (SA). Two fully connected (FC) layers are used for CA in all methods, which has a bottleneck structure with a reduction ratio of r. For SA, one or two convolutions are used. </li></ul><p><strong><em>scaling</em></strong></p><ul><li>to recalibrate the input feature maps, the generated attention map is normalized through a sigmoid function between a range from 0 to 1, and then used for channel or spatial-wise multiplication with X. </li></ul><h2 id="2-Attention-Mechanism-for-SR"><a href="#2-Attention-Mechanism-for-SR" class="headerlink" title="2. Attention Mechanism for SR"></a>2. Attention Mechanism for SR</h2><p><img src="https://github.com/it-hao/clounding/blob/master/data/attention1.png?raw=true" alt="img1"></p><ul><li><p>RCAB </p><p>如上图1中的图所示，只使用了channel attention，来源于论文<a href="https://arxiv.org/pdf/1709.01507.pdf" target="_blank" rel="noopener">SeNet</a>(Squeeze-and-excitation networks )，后来在ECCV2018中第一次用到了SR中，即：<a href="https://arxiv.org/pdf/1807.02758.pdf" target="_blank" rel="noopener">RCAN</a>(Image super-resolution using very deep residual channel attention networks. ) 并且取得了不错的效果，具体的公式如下，不做详细展开。</p><p><img src="https://github.com/it-hao/clounding/blob/master/data/attention2.png?raw=true" alt="img2"></p></li><li><p>CBAM</p><p>正如上面所说，RCAN只用到channel attention，但是并没有应用spatial attention，所以，<a href="https://arxiv.org/pdf/1807.06521.pdf" target="_blank" rel="noopener">CBAM</a>就通过CA 模块和SA 模块探索了特征channel和spatial之间的关系。具体如上图2所示。可以看出，这两种注意力机制使用的是串行的机制，先进行channel attention，后面紧接着跟着一个spatial attention模块。</p></li><li><p>CSAR</p><p>和上面的CBAM一样，<a href="https://arxiv.org/pdf/1809.11130v1.pdf" target="_blank" rel="noopener">CSAR</a>也包括CA 和 SA，并且CA和RCAN中使用的是一模一样的机制，但是SA部分和CBAM相反，并没有使用<em>squeeze</em>过程，直接使用的就是<em>excitation</em>，并且使用的是两个1×1卷积，并且采用的是并行的方式。</p></li><li><p>RAM</p><p><a href="https://arxiv.org/pdf/1811.12043.pdf" target="_blank" rel="noopener">RAM</a>，这篇论文和前面的那些方法有连个不同之处，第一，在CA中，作者使用的并不是<em>Mean pooling</em>操作，而是使用的是<em>variation</em>(方差)操作；第二，在SA中，作者使用的可分离卷积操作。最后将两个<em>attention</em>进行<em>add</em>操作。</p><p>具体的解释作者是这样解释的：每一个特征向量的<em>channel</em>针对不同的使用角色都会有不同的作用，例如，有些filter可能提取水平方向的边缘分量，而有些f<em>ilters</em>则是提取垂直方向的边缘分量。从我们SR的方向来考虑的话，<em>channel</em>的重要性因空间的区域位置而决定，例如，针对一些边缘或者复杂的纹理，复杂的<em>filters</em>就很重要，但是另一方面，对于一些几乎没有高层特征的区域，如天空，就没有必要过于关注。</p></li></ul><h2 id="3-Experiment"><a href="#3-Experiment" class="headerlink" title="3. Experiment"></a>3. Experiment</h2><p><img src="https://github.com/it-hao/clounding/blob/master/data/attention3.png?raw=true" alt="img3"></p><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># RCAB的实现</span><span class="token keyword">class</span> <span class="token class-name">CALayer</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> reduction<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>CALayer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># global average pooling: feature --> point</span>        self<span class="token punctuation">.</span>avg_pool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># feature channel downscale and upscale --> channel weight</span>        self<span class="token punctuation">.</span>conv_du <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>                nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> channel <span class="token operator">//</span> reduction<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>channel <span class="token operator">//</span> reduction<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pooling->conv->relu->conv->sigmoid</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># y = self.var_pool(x)</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>avg_pool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_du<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># CBAM的实现</span><span class="token keyword">class</span> <span class="token class-name">ChannelAttention</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_planes<span class="token punctuation">,</span> ratio<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>ChannelAttention<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>avg_pool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>max_pool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AdaptiveMaxPool2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1   <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_planes<span class="token punctuation">,</span> in_planes <span class="token operator">//</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2   <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_planes <span class="token operator">//</span> <span class="token number">16</span><span class="token punctuation">,</span> in_planes<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>sigmoid <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        avg_out <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>relu1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>avg_pool<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        max_out <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>relu1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_pool<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        out <span class="token operator">=</span> avg_out <span class="token operator">+</span> max_out        <span class="token keyword">return</span> self<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">SpatialAttention</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>SpatialAttention<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> kernel_size <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'kernel size must be 3 or 7'</span>        padding <span class="token operator">=</span> <span class="token number">3</span> <span class="token keyword">if</span> kernel_size <span class="token operator">==</span> <span class="token number">7</span> <span class="token keyword">else</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token punctuation">,</span> padding<span class="token operator">=</span>padding<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>sigmoid <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        avg_out <span class="token operator">=</span> torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>x<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        max_out<span class="token punctuation">,</span> _ <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>x<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>avg_out<span class="token punctuation">,</span> max_out<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># CSAR的实现</span><span class="token keyword">class</span> <span class="token class-name">CSAR</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> reduction<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>CSAR<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># channel attention</span>        self<span class="token punctuation">.</span>CA <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>                nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> channel <span class="token operator">//</span> reduction<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>channel <span class="token operator">//</span> reduction<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># space attention</span>        self<span class="token punctuation">.</span>SA <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>                nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> channel<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>channel<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>sigmoid1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>sigmoid2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>reduction <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>channel <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> channel<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        CA <span class="token operator">=</span> self<span class="token punctuation">.</span>sigmoid1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>CA<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        CA <span class="token operator">=</span> CA <span class="token operator">*</span> x        SA <span class="token operator">=</span> self<span class="token punctuation">.</span>sigmoid2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>SA<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        SA <span class="token operator">=</span> SA <span class="token operator">*</span> x        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>SA<span class="token punctuation">,</span> CA<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>reduction<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span>  x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># RAM的实现</span><span class="token keyword">class</span> <span class="token class-name">CASALayer</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> reduction<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>CASALayer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># channel attention</span>        self<span class="token punctuation">.</span>CA <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>                nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> channel <span class="token operator">//</span> reduction<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>channel <span class="token operator">//</span> reduction<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># space attention</span>        self<span class="token punctuation">.</span>SA <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>             stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> dilation<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> groups<span class="token operator">=</span>channel<span class="token punctuation">,</span>bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>sigmoid <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        CA <span class="token operator">=</span> torch<span class="token punctuation">.</span>var<span class="token punctuation">(</span>x<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        CA <span class="token operator">=</span> torch<span class="token punctuation">.</span>var<span class="token punctuation">(</span>CA<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        CA <span class="token operator">=</span> self<span class="token punctuation">.</span>CA<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        SA <span class="token operator">=</span> self<span class="token punctuation">.</span>SA<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>SA <span class="token operator">+</span> CA<span class="token punctuation">)</span>        <span class="token keyword">return</span>  x <span class="token operator">*</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度可分离卷积</title>
      <link href="/2019/06/05/ji-zhu-ke-fen-chi-juan-ji/"/>
      <url>/2019/06/05/ji-zhu-ke-fen-chi-juan-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​      卷积神经网络在图像处理中的地位已然毋庸置疑。卷积运算具备强大的特征提取能力、相比全连接又消耗更少的参数，应用在图像这样的二维结构数据中有着先天优势。然而受限于目前移动端设备硬件条件，显著降低神经网络的运算量依旧是网络结构优化的目标之一。本文所述的Separable Convolution就是降低卷积运算参数量的一种典型方法。</p><p>​       Depthwise(DW)卷积与Pointwise(PW)卷积，合起来被称作Depthwise Separable Convolution(参见Google的Xception)，该结构和常规卷积操作类似，可用来提取特征，但相比于常规卷积操作，其参数量和运算成本较低。所以在一些轻量级网络中会碰到这种结构如MobileNet。</p><h2 id="常规卷积操作"><a href="#常规卷积操作" class="headerlink" title="常规卷积操作"></a>常规卷积操作</h2><p>对于一张5×5像素、三通道彩色输入图片（shape为5×5×3）。经过3×3卷积核的卷积层（假设输出通道数为4，则卷积核shape为3×3×3×4），最终输出4个Feature Map，如果有same padding则尺寸与输入层相同（5×5），如果没有则为尺寸变为3×3。如下图所示：</p><p><img src="https://github.com/it-hao/clounding/blob/master/data/conv-std.jpg?raw=true" alt="卷积操作"></p><p><strong>参数为：N_std = 4 × 3 × 3 × 3 = 108</strong></p><h2 id="Depthwise-Seperated-Convlolution"><a href="#Depthwise-Seperated-Convlolution" class="headerlink" title="Depthwise Seperated Convlolution"></a>Depthwise Seperated Convlolution</h2><p>Separable Convolution在Google的Xception<a href="https://yinguobing.com/separable-convolution/#fn1" target="_blank" rel="noopener">[1]</a>以及MobileNet<a href="https://yinguobing.com/separable-convolution/#fn2" target="_blank" rel="noopener">[2]</a>论文中均有描述。它的核心思想是将一个完整的卷积运算分解为两步进行，分别为Depthwise Convolution与Pointwise Convolution。</p><h2 id="Depthwise-Convolution"><a href="#Depthwise-Convolution" class="headerlink" title="Depthwise Convolution"></a>Depthwise Convolution</h2><p>同样是上述例子，一个大小为64×64像素、三通道彩色图片首先经过第一次卷积运算，不同之处在于此次的卷积完全是在二维平面内进行，且Filter的数量与上一层的Depth相同。所以一个三通道的图像经过运算后生成了3个 Feature maps，如下图所示：</p><p><img src="https://github.com/it-hao/clounding/blob/master/data/depthwise-conv.jpg?raw=true" alt="depthwise convolution"></p><p><strong>参数为：N_depthwise = 3 × 3 × 3 = 27</strong></p><p><strong>注意：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span>　<span class="token class-name">torch</span><span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> dilation<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> groups<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>其中：groups就是实现depthwise conv的关键，默认为<span class="token number">1</span>，意思是将输入分为一组，此时是常规卷积，当将其设为in_channels时，意思是将输入的每一个通道作为一组，然后分别对其卷积。所以：最后总结下，要实现depthwise conv，就将groups设为in_channels，同时out_channels也设为与in_channels相同。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Depthwise Convolution完成后的Feature map数量与输入层的depth相同，但是这种运算对输入层的每个channel独立进行卷积运算后就结束了，没有有效的利用不同map在相同空间位置上的信息。因此需要增加另外一步操作来将这些map进行组合生成新的Feature map，即接下来的Pointwise Convolution。</p><h2 id="Pointwise-Convolution"><a href="#Pointwise-Convolution" class="headerlink" title="Pointwise Convolution"></a>Pointwise Convolution</h2><p>Pointwise Convolution的运算与常规卷积运算非常相似，不同之处在于卷积核的尺寸为 1×1×M，M为上一层的depth。所以这里的卷积运算会将上一步的map在深度方向上进行加权组合，生成新的Feature map。有几个Filter就有几个Feature map。如下图所示：</p><p><img src="https://github.com/it-hao/clounding/blob/master/data/pointwise-conv.jpg?raw=true" alt="pointwise convolution"></p><p><strong>参数为：N_pointwise = 1 × 1 × 3 × 4 = 12</strong></p><h2 id="Pytorch代码实现"><a href="#Pytorch代码实现" class="headerlink" title="Pytorch代码实现"></a>Pytorch代码实现</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SeparableConv2d</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>in_channels<span class="token punctuation">,</span>out_channels<span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                 stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>dilation<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>SeparableConv2d<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span>in_channels<span class="token punctuation">,</span>kernel_size<span class="token punctuation">,</span>stride<span class="token punctuation">,</span>                               padding<span class="token punctuation">,</span>dilation<span class="token punctuation">,</span>groups<span class="token operator">=</span>in_channels<span class="token punctuation">,</span>bias<span class="token operator">=</span>bias<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pointwise <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span>out_channels<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>bias<span class="token operator">=</span>bias<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pointwise<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参数对比"><a href="#参数对比" class="headerlink" title="参数对比"></a>参数对比</h2><p>回顾一下，常规卷积的参数个数为：</p><pre><code>N_std = 4 × 3 × 3 × 3 = 108</code></pre><p>Separable Convolution的参数由两部分相加得到：</p><pre class="line-numbers language-python"><code class="language-python">N_depthwise <span class="token operator">=</span> <span class="token number">3</span> × <span class="token number">3</span> × <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">27</span>N_pointwise <span class="token operator">=</span> <span class="token number">1</span> × <span class="token number">1</span> × <span class="token number">3</span> × <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">12</span>N_separable <span class="token operator">=</span> N_depthwise <span class="token operator">+</span> N_pointwise <span class="token operator">=</span> <span class="token number">39</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> 卷积神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SR数据集整理</title>
      <link href="/2019/05/22/sr-sr-shu-ju-ji-zheng-li/"/>
      <url>/2019/05/22/sr-sr-shu-ju-ji-zheng-li/</url>
      
        <content type="html"><![CDATA[<p> XINTAO大神的 <a href="https://github.com/xinntao" target="_blank" rel="noopener">GitHub</a></p><p>XINTAO 大神的 <a href="https://xinntao.github.io/" target="_blank" rel="noopener">博客</a></p><h2 id="DataSet"><a href="#DataSet" class="headerlink" title="DataSet"></a><strong>DataSet</strong></h2><p>Several common SR datasets are list below.</p><table><thead><tr><th>Name</th><th>Datasets</th><th>Short Description</th><th>Google Drive</th><th>Baidu Drive</th></tr></thead><tbody><tr><td>Classical SR Training</td><td>T91</td><td>91 images for training</td><td><a href="https://drive.google.com/drive/folders/1pRmhEmmY-tPF7uH8DuVthfHoApZWJ1QU?usp=sharing" target="_blank" rel="noopener">Google Drive</a></td><td><a href="https://pan.baidu.com/s/1q_1ERCMqALH0xFwjLM0pTg" target="_blank" rel="noopener">Baidu Drive</a></td></tr><tr><td><a href="https://www2.eecs.berkeley.edu/Research/Projects/CS/vision/bsds/" target="_blank" rel="noopener">BSDS200</a></td><td>A subset (train) of BSD500 for training</td><td></td><td></td><td></td></tr><tr><td><a href="http://mmlab.ie.cuhk.edu.hk/projects/FSRCNN.html" target="_blank" rel="noopener">General100</a></td><td>100 images for training</td><td></td><td></td><td></td></tr><tr><td>Classical SR Testing</td><td>Set5</td><td>Set5 test dataset</td><td></td><td></td></tr><tr><td>Set14</td><td>Set14 test dataset</td><td></td><td></td><td></td></tr><tr><td><a href="https://www2.eecs.berkeley.edu/Research/Projects/CS/vision/bsds/" target="_blank" rel="noopener">BSDS100</a></td><td>A subset (test) of BSD500 for testing</td><td></td><td></td><td></td></tr><tr><td><a href="https://sites.google.com/site/jbhuang0604/publications/struct_sr" target="_blank" rel="noopener">urban100</a></td><td>100 building images for testing (regular structures)</td><td></td><td></td><td></td></tr><tr><td><a href="http://www.manga109.org/en/" target="_blank" rel="noopener">manga109</a></td><td>109 images of Japanese manga for testing</td><td></td><td></td><td></td></tr><tr><td>historical</td><td>10 gray LR images without the ground-truth</td><td></td><td></td><td></td></tr><tr><td>2K Resolution</td><td><a href="https://data.vision.ee.ethz.ch/cvl/DIV2K/" target="_blank" rel="noopener">DIV2K</a></td><td>proposed in <a href="http://www.vision.ee.ethz.ch/ntire17/" target="_blank" rel="noopener">NTIRE17</a>(800 train and 100 validation)</td><td><a href="https://drive.google.com/drive/folders/1B-uaxvV9qeuQ-t7MFiN1oEdA6dKnj2vW?usp=sharing" target="_blank" rel="noopener">Google Drive</a></td><td><a href="https://pan.baidu.com/s/1CFIML6KfQVYGZSNFrhMXmA" target="_blank" rel="noopener">Baidu Drive</a></td></tr><tr><td><a href="https://github.com/LimBee/NTIRE2017" target="_blank" rel="noopener">Flickr2K</a></td><td>2650 2K images from Flickr for training</td><td></td><td></td><td></td></tr><tr><td>DF2K</td><td>A merged training dataset of DIV2K and Flickr2K</td><td></td><td></td><td></td></tr><tr><td>OST (Outdoor Scenes)</td><td>OST Training</td><td>7 categories images with rich textures</td><td><a href="https://drive.google.com/drive/u/1/folders/1iZfzAxAwOpeutz27HC56_y5RNqnsPPKr" target="_blank" rel="noopener">Google Drive</a></td><td><a href="https://pan.baidu.com/s/1neUq5tZ4yTnOEAntZpK_rQ#list/path=%2Fpublic%2FSFTGAN&amp;parentPath=%2Fpublic" target="_blank" rel="noopener">Baidu Drive</a></td></tr><tr><td>OST300</td><td>300 test images of outdoor scences</td><td></td><td></td><td></td></tr><tr><td>PIRM</td><td>PIRM</td><td>PIRM self-val, val, test datasets</td><td><a href="https://drive.google.com/drive/folders/17FmdXu5t8wlKwt8extb_nQAdjxUOrb1O?usp=sharing" target="_blank" rel="noopener">Google Drive</a></td><td><a href="https://pan.baidu.com/s/1gYv4tSJk_RVCbCq4B6UxNQ" target="_blank" rel="noopener">Baidu Drive</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> SR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dataset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora简单介绍</title>
      <link href="/2019/05/21/tools-typora/"/>
      <url>/2019/05/21/tools-typora/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Typora 删除了预览窗口，取而代之的是实时预览</li><li>Markdown的语法因不同的解析器或编辑器而异，Typora使用的是<a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/" target="_blank" rel="noopener">GitHub Flavored Markdown</a>。</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Typora<a href="https://www.typora.io/#download" target="_blank" rel="noopener">下载</a>地址</p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ul><li>加粗: <code>Ctrl + B</code></li><li>标题: <code>Ctrl + 0/1/2/..</code></li><li>插入链接：<code>Ctrl + k</code></li><li>行内代码:  <code>Ctrl + Shift +</code> ` </li><li>有序列表： <code>Ctrl + Shift +]</code></li><li>无序列表：<code>Ctrl + Shift + [</code></li><li>插入图片：<code>Ctrl + Shift +I</code></li><li>撤销:  <code>Ctrl + z</code></li><li>公式快：<code>Ctrl + Shift + M</code></li><li>代码块：<code>Ctrl + Shift + K</code></li></ul><h2 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h2><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>开头$$+换行键，产生输入区域，输入Tex/LaTex格式的数学公式，代码和效果如下图：</p><blockquote><p>\Gamma(z) = \int_0^\infty t{z-1}e{-t}dt,. </p></blockquote><p>$$<br> \Gamma(z) = \int_0^\infty t{z-1}e{-t}dt,.<br>$$</p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><pre class="line-numbers language-c"><code class="language-c">脚注产生的方法<span class="token punctuation">[</span><span class="token operator">^</span>footnote<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token operator">^</span>footnote<span class="token punctuation">]</span><span class="token punctuation">:</span>这个就是<span class="token string">"脚注"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="插入表情"><a href="#插入表情" class="headerlink" title="插入表情"></a>插入表情</h2><pre class="line-numbers language-c"><code class="language-c">以<span class="token punctuation">:</span>开始，然后输入表情的英文单词例如：<span class="token punctuation">:</span>happy<span class="token punctuation">:</span>sad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成目录"><a href="#生成目录" class="headerlink" title="生成目录"></a>生成目录</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token punctuation">[</span>TOC<span class="token punctuation">]</span>按住回车<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SR评价指标</title>
      <link href="/2019/05/20/sr-sr-ping-jie-zhi-biao/"/>
      <url>/2019/05/20/sr-sr-ping-jie-zhi-biao/</url>
      
        <content type="html"><![CDATA[<p>针对super resolution任务中的评价指标，针对pytorch框架和最近常用的EDSR代码，做一个简单的总结。在EDSR代码中，为了测试的准确性，是先将SR图片生成保存起来，然后用matlab代码进行计算，并且是在y通道上进行计算psnr和ssim，但是这样可能会费时间，所以这里直接集成在python代码中，最终计算出来的结果和matlab代码计算出来的结果是一样的。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span>、使用预训练模型生成SR图片：sr <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>lr<span class="token punctuation">,</span> idx_scale<span class="token punctuation">)</span><span class="token number">2</span>、然后将tensor转化为numpy<span class="token punctuation">:</span>visuals <span class="token operator">=</span> utility<span class="token punctuation">.</span>get_current_visual<span class="token punctuation">(</span>lr<span class="token punctuation">,</span> hr<span class="token punctuation">,</span> sr<span class="token punctuation">,</span> self<span class="token punctuation">.</span>args<span class="token punctuation">.</span>rgb_range<span class="token punctuation">)</span>其中：get_current_visual<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_current_visual</span><span class="token punctuation">(</span>lr<span class="token punctuation">,</span> hr <span class="token punctuation">,</span>sr<span class="token punctuation">,</span> rgb_range<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    return LR SR (HR) images    """</span>    out_dict <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>    out_dict<span class="token punctuation">[</span><span class="token string">'LR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> lr<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>float<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span>    out_dict<span class="token punctuation">[</span><span class="token string">'SR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sr<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>float<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span>    out_dict<span class="token punctuation">[</span><span class="token string">'HR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> hr<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>float<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span>    out_dict<span class="token punctuation">[</span><span class="token string">'LR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> out_dict<span class="token punctuation">[</span><span class="token string">'HR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> out_dict<span class="token punctuation">[</span><span class="token string">'SR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> \    Tensor2np<span class="token punctuation">(</span><span class="token punctuation">[</span>out_dict<span class="token punctuation">[</span><span class="token string">'LR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> out_dict<span class="token punctuation">[</span><span class="token string">'HR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> out_dict<span class="token punctuation">[</span><span class="token string">'SR'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rgb_range<span class="token punctuation">)</span>    <span class="token keyword">return</span> out_dict<span class="token keyword">def</span> <span class="token function">Tensor2np</span><span class="token punctuation">(</span>tensor_list<span class="token punctuation">,</span> rgb_range<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">_Tensor2numpy</span><span class="token punctuation">(</span>tensor<span class="token punctuation">,</span> rgb_range<span class="token punctuation">)</span><span class="token punctuation">:</span>        array <span class="token operator">=</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>quantize<span class="token punctuation">(</span>tensor<span class="token punctuation">,</span> rgb_range<span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>        <span class="token keyword">return</span> array    <span class="token keyword">return</span> <span class="token punctuation">[</span>_Tensor2numpy<span class="token punctuation">(</span>tensor<span class="token punctuation">,</span> rgb_range<span class="token punctuation">)</span> <span class="token keyword">for</span> tensor <span class="token keyword">in</span> tensor_list<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">quantize</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> rgb_range<span class="token punctuation">)</span><span class="token punctuation">:</span>    pixel_range <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">/</span> rgb_range    <span class="token keyword">return</span> img<span class="token punctuation">.</span>mul<span class="token punctuation">(</span>pixel_range<span class="token punctuation">)</span><span class="token punctuation">.</span>clamp<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">.</span>round<span class="token number">3</span>、计算psnr和ssim值psnr<span class="token punctuation">,</span> ssim <span class="token operator">=</span> utility<span class="token punctuation">.</span>calc_metrics<span class="token punctuation">(</span>visuals<span class="token punctuation">[</span><span class="token string">'SR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> visuals<span class="token punctuation">[</span><span class="token string">'HR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> crop_border<span class="token operator">=</span>scale<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重点在于计算PSNR值和SSIM值：</strong></p><pre class="line-numbers language-python"><code class="language-python">将RGB通道图片转换为yCbCr<span class="token keyword">def</span> <span class="token function">rgb2ycbcr</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> only_y<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''same as matlab rgb2ycbcr    only_y: only return Y channel    Input:        uint8, [0, 255]        float, [0, 1]    '''</span>    in_img_type <span class="token operator">=</span> img<span class="token punctuation">.</span>dtype    img<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>    <span class="token keyword">if</span> in_img_type <span class="token operator">!=</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">:</span>        img <span class="token operator">*=</span> <span class="token number">255</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true"># convert</span>    <span class="token keyword">if</span> only_y<span class="token punctuation">:</span>        rlt <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">65.481</span><span class="token punctuation">,</span> <span class="token number">128.553</span><span class="token punctuation">,</span> <span class="token number">24.966</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255.0</span> <span class="token operator">+</span> <span class="token number">16.0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        rlt <span class="token operator">=</span> np<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">65.481</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">37.797</span><span class="token punctuation">,</span> <span class="token number">112.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">128.553</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">74.203</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">93.786</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                <span class="token punctuation">[</span><span class="token number">24.966</span><span class="token punctuation">,</span> <span class="token number">112.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">18.214</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255.0</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> in_img_type <span class="token operator">==</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">:</span>        rlt <span class="token operator">=</span> rlt<span class="token punctuation">.</span>round<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        rlt <span class="token operator">/=</span> <span class="token number">255</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> rlt<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>in_img_type<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#########################calc_metrics#############################</span><span class="token keyword">def</span> <span class="token function">calc_metrics</span><span class="token punctuation">(</span>img1<span class="token punctuation">,</span> img2<span class="token punctuation">,</span> crop_border<span class="token punctuation">,</span> test_Y<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#</span>    img1 <span class="token operator">=</span> img1 <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span>    img2 <span class="token operator">=</span> img2 <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> test_Y <span class="token operator">and</span> img1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># evaluate on Y channel in YCbCr color space</span>        im1_in <span class="token operator">=</span> rgb2ycbcr<span class="token punctuation">(</span>img1<span class="token punctuation">)</span>        im2_in <span class="token operator">=</span> rgb2ycbcr<span class="token punctuation">(</span>img2<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        im1_in <span class="token operator">=</span> img1        im2_in <span class="token operator">=</span> img2    <span class="token keyword">if</span> im1_in<span class="token punctuation">.</span>ndim <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        cropped_im1 <span class="token operator">=</span> im1_in<span class="token punctuation">[</span>crop_border<span class="token punctuation">:</span><span class="token operator">-</span>crop_border<span class="token punctuation">,</span> crop_border<span class="token punctuation">:</span><span class="token operator">-</span>crop_border<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        cropped_im2 <span class="token operator">=</span> im2_in<span class="token punctuation">[</span>crop_border<span class="token punctuation">:</span><span class="token operator">-</span>crop_border<span class="token punctuation">,</span> crop_border<span class="token punctuation">:</span><span class="token operator">-</span>crop_border<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">elif</span> im1_in<span class="token punctuation">.</span>ndim <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        cropped_im1 <span class="token operator">=</span> im1_in<span class="token punctuation">[</span>crop_border<span class="token punctuation">:</span><span class="token operator">-</span>crop_border<span class="token punctuation">,</span> crop_border<span class="token punctuation">:</span><span class="token operator">-</span>crop_border<span class="token punctuation">]</span>        cropped_im2 <span class="token operator">=</span> im2_in<span class="token punctuation">[</span>crop_border<span class="token punctuation">:</span><span class="token operator">-</span>crop_border<span class="token punctuation">,</span> crop_border<span class="token punctuation">:</span><span class="token operator">-</span>crop_border<span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'Wrong image dimension: {}. Should be 2 or 3.'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>im1_in<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span><span class="token punctuation">)</span>    psnr <span class="token operator">=</span> calc_psnr<span class="token punctuation">(</span>cropped_im1 <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">,</span> cropped_im2 <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span>    ssim <span class="token operator">=</span> calc_ssim<span class="token punctuation">(</span>cropped_im1 <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">,</span> cropped_im2 <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> psnr<span class="token punctuation">,</span> ssim<span class="token keyword">def</span> <span class="token function">calc_psnr</span><span class="token punctuation">(</span>img1<span class="token punctuation">,</span> img2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># img1 and img2 have range [0, 255]</span>    img1 <span class="token operator">=</span> img1<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span>    img2 <span class="token operator">=</span> img2<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span>    mse <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span>img1 <span class="token operator">-</span> img2<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> mse <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">20</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>log10<span class="token punctuation">(</span><span class="token number">255.0</span> <span class="token operator">/</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>mse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ssim</span><span class="token punctuation">(</span>img1<span class="token punctuation">,</span> img2<span class="token punctuation">)</span><span class="token punctuation">:</span>    C1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.01</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>    C2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.03</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>    img1 <span class="token operator">=</span> img1<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span>    img2 <span class="token operator">=</span> img2<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span>    kernel <span class="token operator">=</span> cv2<span class="token punctuation">.</span>getGaussianKernel<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">)</span>    window <span class="token operator">=</span> np<span class="token punctuation">.</span>outer<span class="token punctuation">(</span>kernel<span class="token punctuation">,</span> kernel<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    mu1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># valid</span>    mu2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>img2<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span>    mu1_sq <span class="token operator">=</span> mu1<span class="token operator">**</span><span class="token number">2</span>    mu2_sq <span class="token operator">=</span> mu2<span class="token operator">**</span><span class="token number">2</span>    mu1_mu2 <span class="token operator">=</span> mu1 <span class="token operator">*</span> mu2    sigma1_sq <span class="token operator">=</span> cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>img1<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">-</span> mu1_sq    sigma2_sq <span class="token operator">=</span> cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>img2<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">-</span> mu2_sq    sigma12 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>img1 <span class="token operator">*</span> img2<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">-</span> mu1_mu2    ssim_map <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> mu1_mu2 <span class="token operator">+</span> C1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> sigma12 <span class="token operator">+</span> C2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mu1_sq <span class="token operator">+</span> mu2_sq <span class="token operator">+</span> C1<span class="token punctuation">)</span> <span class="token operator">*</span>                                                            <span class="token punctuation">(</span>sigma1_sq <span class="token operator">+</span> sigma2_sq <span class="token operator">+</span> C2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ssim_map<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">calc_ssim</span><span class="token punctuation">(</span>img1<span class="token punctuation">,</span> img2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''calculate SSIM    the same outputs as MATLAB's    img1, img2: [0, 255]    '''</span>    <span class="token keyword">if</span> <span class="token operator">not</span> img1<span class="token punctuation">.</span>shape <span class="token operator">==</span> img2<span class="token punctuation">.</span>shape<span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'Input images must have the same dimensions.'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> img1<span class="token punctuation">.</span>ndim <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> ssim<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> img2<span class="token punctuation">)</span>    <span class="token keyword">elif</span> img1<span class="token punctuation">.</span>ndim <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> img1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            ssims <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                ssims<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ssim<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> img2<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>ssims<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> img1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> ssim<span class="token punctuation">(</span>np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>img1<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>img2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'Wrong input image dimensions.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床工具的使用——PicGo</title>
      <link href="/2019/05/19/tools-tu-chuang-gong-ju-de-shi-yong-picgo/"/>
      <url>/2019/05/19/tools-tu-chuang-gong-ju-de-shi-yong-picgo/</url>
      
        <content type="html"><![CDATA[<h2 id="一、图床"><a href="#一、图床" class="headerlink" title="一、图床"></a>一、图床</h2><ul><li>方便程度：★★★★☆</li><li>配置难度：★★☆☆☆</li><li>适用环境：win + mac + linux</li><li>需要工具：GitHub 账号 + PicGo 客户端</li><li>稳定性：背靠 GitHub 和微软，比自建服务器都稳</li><li>隐私性：这算是唯一缺点，你的图片别人可以访问</li></ul><blockquote><p>所谓图床工具，就是自动把本地图片转换成链接的一款工具，网络上有很多图床工具，就目前使用种类而言，<code>PicGo</code> 算得上一款比较优秀的图床工具。它是一款用 <code>Electron-vue</code> 开发的软件，可以支持微博，七牛云，腾讯云COS，又拍云，<code>GitHub</code>，<code>阿里云OSS</code>，<code>SM.MS</code>，<code>imgur</code> 等8种常用图床，功能强大，简单易用。<br>下载网址：<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a><br><strong>注意</strong>：mac 系统选择 dmg 下载，windwos 选择 .exe系统，如果不是下载安装包，想看源码的话，可以选择 git clone <a href="https://github.com/Molunerfinn/PicGo.git" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo.git</a> 克隆到本地</p></blockquote><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><h3 id="1-配置GitHub"><a href="#1-配置GitHub" class="headerlink" title="1. 配置GitHub"></a>1. 配置GitHub</h3><blockquote><p>流程：新建 public 仓库 -&gt; 创建 token -&gt; 复制 token 备用</p></blockquote><p><strong>1.1 新建仓库</strong></p><p>点击git主页右上角的<code>+</code>创建 <code>New resposity</code></p><p><img src="https://github.com/it-hao/clounding/blob/master/data/PicGo-GitHub0.png?raw=true" alt="图1"></p><p>填写仓库信息，例如我就创建了一个 <code>cloudimg</code> 的仓库。这里注意，仓库得设置为 <code>Public</code> 因为后面通过客户端访问算是外部访问，因此无法访问 <code>Private</code> ，这样的话图片传上来之后只能存储不能显示。所以要设置为 <code>Public</code>。</p><p><img src="https://github.com/it-hao/clounding/blob/master/data/PicGo-GitHub2.png?raw=true" alt="图2"></p><p><strong>1.2 创建token并复制保存</strong></p><p>此时仓库已经建立，点击右上角头像，然后进入设置；</p><p><img src="https://github.com/it-hao/clounding/blob/master/data/PicGo-GitHub1.png?raw=true" alt="图3"></p><p>在页面最下找到 <code>Developer settings</code>，点击进入；</p><p><img src="https://github.com/it-hao/clounding/blob/master/data/PicGo-GitHub2.png?raw=true" alt="图4"></p><p>创建token</p><p><img src="https://github.com/it-hao/clounding/blob/master/data/PicGo-GitHub3.png?raw=true" alt="图5"></p><p>填 description（也是随心填），勾选复选框 repo ，接着到页面底部 <code>Generate token</code> 就完成了；</p><p><img src="https://github.com/it-hao/clounding/blob/master/data/PicGo-GitHub4.png?raw=true" alt="图6"></p><p>然后复制生成一串字符 token，这个 token 只出现一次，所以要保存一下。</p><p><img src="https://github.com/it-hao/clounding/blob/master/data/PicGo-GitHub5.png?raw=true" alt="图7"></p><h3 id="2-配置PicGo"><a href="#2-配置PicGo" class="headerlink" title="2. 配置PicGo"></a>2. 配置PicGo</h3><p><strong>2.1 下载&amp;安装</strong></p><p>PicGo （目前 2.1.4）是一个开源的图床工具，非常优秀。可以到 git 上下载，但下载速度太慢，所以我放了一个百度云的链接，速度快很多。</p><p>git地址：<a href="https://github.com/Molunerfinn/PicGo/release" target="_blank" rel="noopener">PicGo</a></p><p>Win版下载链接：<a href="https://pan.baidu.com/s/17KycPMoqNCnc1cR_yQO8nQ" target="_blank" rel="noopener">百度云</a> 密码：PicG</p><p><strong>2.2 配置</strong></p><p><img src="https://github.com/it-hao/clounding/blob/master/data/PicGo-GitHub6.png?raw=true" alt="图8"></p><ul><li>仓库名 即GitHub上建立的仓库名</li><li>分支名 默认为 <code>master</code></li><li>Token 就是刚刚复制的那一串字符</li><li>存储路径就是在你建的仓库中文件夹名字，可以以便于分类</li><li>域名：<code>https://raw.githubusercontent.com/it-hao/PicData/master 这个要改一下 格式 https://raw.githubusercontent.com/[仓库名]/master</code></li></ul><p>然后在PicGo客户端可以自定义设置快捷键啥的，自己设置。</p><p><img src="https://github.com/it-hao/clounding/blob/master/data/PicGo-GitHub7.png?raw=true" alt="图9"></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 文档风格的 Typora 主题</title>
      <link href="/2019/05/18/tools-vue-wen-dang-feng-ge-de-typora-zhu-ti/"/>
      <url>/2019/05/18/tools-vue-wen-dang-feng-ge-de-typora-zhu-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/blinkfox/typora-vue-theme" target="_blank" rel="noopener">typora-vue-theme</a> 是 Typora Markdown 文档编辑器中一款类似<a href="https://vuejs.org/" target="_blank" rel="noopener">Vue</a>文档风格的主题。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>是一款支持实时预览的 Markdown 编辑器和阅读器，支持<code>Windows</code>、<code>macOS</code>、<code>Linux</code>三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。<strong><a href="https://github.com/blinkfox/typora-vue-theme" target="_blank" rel="noopener">typora-vue-theme</a>就是参考了<a href="https://vuejs.org/" target="_blank" rel="noopener">Vue</a>文档风格而开发的一个 Typora 自定义主题</strong>。</p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><ol><li>下载本主题中的<code>vue.css</code>、<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹；</li><li>打开 Typora，点击“<strong>偏好设置</strong>” =&gt; “<strong>打开主题文件夹</strong>”按钮，将弹出 Typora 的主题文件夹；</li><li>将下载好的<code>vue.css</code>和<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹放到 Typora 的主题文件夹中；</li><li>关闭并重新打开 Typora，从菜单栏中选择 “<strong>主题</strong>” =&gt; “<strong>Vue</strong>” 或者 “<strong>Vue Dark</strong>” 即可。</li></ol><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://static.blinkfox.com/typora_vue_theme_screen_01.png" alt="vue主题效果图1"></p><p><img src="http://static.blinkfox.com/typora_vue_theme_screen_02.png" alt="vue主题效果图2"></p><p><img src="http://static.blinkfox.com/typora_vue_theme_screen_03.png" alt="vue主题效果图3"></p><h3 id="Vue-Dark"><a href="#Vue-Dark" class="headerlink" title="Vue Dark"></a>Vue Dark</h3><p><img src="https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_01.png" alt="vue主题效果图4"></p><p><img src="https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_02.png" alt="vue主题效果图5"></p><blockquote><p><strong>感谢</strong>: 本主题中的<code>vue-dark.css</code>来自<a href="https://github.com/MamoruDS/typora-vue-dark-theme" target="_blank" rel="noopener">typora-vue-dark-theme</a>.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SR数据处理</title>
      <link href="/2019/01/24/sr-sr-shu-ju-chu-li/"/>
      <url>/2019/01/24/sr-sr-shu-ju-chu-li/</url>
      
        <content type="html"><![CDATA[<p>在做SR实验中，因为网络深度，显存较小等问题，必须对图片进行处理，以便能够得到更好的实验结果。</p><h2 id="SR数据处理"><a href="#SR数据处理" class="headerlink" title="SR数据处理"></a>SR数据处理</h2><h3 id="1、图片多尺度处理"><a href="#1、图片多尺度处理" class="headerlink" title="1、图片多尺度处理"></a>1、图片多尺度处理</h3><p><strong>这里主要的思想是：</strong></p><ul><li><p>将尺度大于 512×512 的图片按照0.5.-&gt;06-&gt;···1.0的尺度分别保存到单独的文件夹中；</p></li><li><p>将尺度小于 512×512 的图片单独保存在一个文件夹中；</p></li></ul><p><strong>代码如下：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">classfily_image</span><span class="token punctuation">(</span>image_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    按照图片大小将其分类到不同尺度的文件夹中    """</span>    file_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 得到所有图片的绝对路径</span>    filenames_from_dir<span class="token punctuation">(</span>image_dir<span class="token punctuation">,</span> file_names<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> file_names<span class="token punctuation">:</span>        image <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 分别获得文件夹的根目录，图片名，图片的后缀名</span>        image_dir<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> exten <span class="token operator">=</span> get_filePath_Name_Ext<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># crop_dir1 = save_path+'\\'+filename+'cropxy_'+str(x)+'_'+str(y)+exten</span>        image_size <span class="token operator">=</span> min<span class="token punctuation">(</span>image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># image_size &lt; 512的单独进行处理，然后image_size > 512 的将他们的尺度分别缩小为0.5~1倍</span>        <span class="token keyword">if</span> image_size <span class="token operator">&lt;</span> <span class="token number">512</span><span class="token punctuation">:</span>            image_save_dir <span class="token operator">=</span> image_dir <span class="token operator">+</span> <span class="token string">"\\small_size"</span>            create_new_folder<span class="token punctuation">(</span>image_save_dir<span class="token punctuation">)</span>            image_save_name <span class="token operator">=</span> image_save_dir <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">"_small_size"</span> <span class="token operator">+</span> exten            <span class="token comment" spellcheck="true"># save image</span>            image<span class="token punctuation">.</span>save<span class="token punctuation">(</span>image_save_name<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># scale = round(512 / image_size, 1) + 0.1 # 这里不能四舍五入</span>            scale <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token number">5120</span><span class="token operator">/</span>image_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0.1</span>            <span class="token comment" spellcheck="true"># 图片的大小是 >512  and  &lt;1024</span>            <span class="token keyword">if</span> scale <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># for x in np.arange(max(scale,0.5), 1, 0.1): # 容易出现问题</span>                <span class="token keyword">for</span> x <span class="token keyword">in</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>max<span class="token punctuation">(</span>scale<span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1.01</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    downtrans <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>round<span class="token punctuation">(</span>image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>round<span class="token punctuation">(</span>image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>interpolation<span class="token operator">=</span>Image<span class="token punctuation">.</span>BICUBIC<span class="token punctuation">)</span>                    new_image <span class="token operator">=</span> downtrans<span class="token punctuation">(</span>image<span class="token punctuation">)</span>                    image_save_dir <span class="token operator">=</span> image_dir <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"_size"</span>                    create_new_folder<span class="token punctuation">(</span>image_save_dir<span class="token punctuation">)</span>                    image_save_name <span class="token operator">=</span> image_save_dir <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> filename <span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"_size"</span> <span class="token operator">+</span> exten                    <span class="token comment" spellcheck="true"># save</span>                    new_image<span class="token punctuation">.</span>save<span class="token punctuation">(</span>image_save_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、图片切块"><a href="#2、图片切块" class="headerlink" title="2、图片切块"></a>2、图片切块</h3><p><strong>这里主要是采用了两种方法：</strong></p><ul><li><p><strong>五分法：</strong>将所有图片切成5块，主要想法是切成 512×512 大小，在论文中，4倍下采样为 128×128 ，通过算法恢复成为 原始大小；也可以切成 384×384 大小，3倍下采样为 128×128 ；或者切成 256×256 大小，2倍下采样为 128×128。</p></li><li><p><strong>滑窗法：</strong>这里采用的就是 stride 来进行一定的滑动，以便获得更多的图片，但是在之前实验中表明这样的效果不是很好，但是为了得到一整图片的整体特征的话，这种方法得到的图片还是有用的，但是这样的label不需要很多。</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">crop_fiveImages</span><span class="token punctuation">(</span>image_dir<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    五分法：    """</span>    image_save_dir <span class="token operator">=</span> image_dir <span class="token operator">+</span> <span class="token string">'\\edges-'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>width<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 保存边缘图片</span>    image_save_dir2 <span class="token operator">=</span> image_dir <span class="token operator">+</span> <span class="token string">'\\centers-'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>width<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 保存中间图片</span>    create_new_folder<span class="token punctuation">(</span>image_save_dir<span class="token punctuation">)</span>    create_new_folder<span class="token punctuation">(</span>image_save_dir2<span class="token punctuation">)</span>    file_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    cropLen <span class="token operator">=</span> <span class="token number">0</span>    filenames_from_dir<span class="token punctuation">(</span>image_dir<span class="token punctuation">,</span> file_names<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 得到所有图片的绝对路径</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> file_names<span class="token punctuation">:</span>        img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        root_dir<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> exten <span class="token operator">=</span> get_filePath_Name_Ext<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        size1 <span class="token operator">=</span> img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># Height</span>        size0 <span class="token operator">=</span> img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># Width</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>width<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>height<span class="token punctuation">]</span><span class="token punctuation">:</span>                crop_dir1 <span class="token operator">=</span> image_save_dir <span class="token operator">+</span> <span class="token string">'\\'</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">'cropxy_'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'_'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> exten                region <span class="token operator">=</span> img<span class="token punctuation">.</span>crop<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>width<span class="token punctuation">,</span>y<span class="token operator">+</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>                region<span class="token punctuation">.</span>save<span class="token punctuation">(</span>crop_dir1<span class="token punctuation">)</span>                cropLen <span class="token operator">+=</span> <span class="token number">1</span>        x <span class="token operator">=</span> img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">//</span><span class="token number">2</span> <span class="token operator">-</span> width<span class="token operator">//</span><span class="token number">2</span>        y <span class="token operator">=</span> img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">//</span><span class="token number">2</span> <span class="token operator">-</span> height<span class="token operator">//</span><span class="token number">2</span>        crop_dir2 <span class="token operator">=</span> image_save_dir2<span class="token operator">+</span><span class="token string">'\\'</span><span class="token operator">+</span>filename<span class="token operator">+</span><span class="token string">'cropxy_'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'_'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">+</span>exten        region <span class="token operator">=</span> img<span class="token punctuation">.</span>crop<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>width<span class="token punctuation">,</span>y<span class="token operator">+</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>        region<span class="token punctuation">.</span>save<span class="token punctuation">(</span>crop_dir2<span class="token punctuation">)</span>        cropLen <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> cropLen<span class="token keyword">def</span> <span class="token function">crop_slideWindows</span><span class="token punctuation">(</span>image_dir<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">,</span>stride<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    滑窗法：    """</span>    save_path<span class="token operator">=</span>image_dir <span class="token operator">+</span> <span class="token string">'\\crops'</span>    create_new_folder<span class="token punctuation">(</span>save_path<span class="token punctuation">)</span>    file_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 得到所有图片的绝对路径，包括子文件夹中的图片</span>    filenames_from_dir<span class="token punctuation">(</span>image_dir<span class="token punctuation">,</span> file_names<span class="token punctuation">)</span>    cropLen <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> file_names<span class="token punctuation">:</span>        im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 分别获得文件夹的根目录，图片名，图片的后缀名</span>        root_dir<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> exten <span class="token operator">=</span> get_filePath_Name_Ext<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> width<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>width<span class="token punctuation">,</span> stride<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>height<span class="token punctuation">,</span> stride<span class="token punctuation">)</span><span class="token punctuation">:</span>                    crop_dir <span class="token operator">=</span> save_path<span class="token operator">+</span><span class="token string">'\\'</span><span class="token operator">+</span>filename<span class="token operator">+</span><span class="token string">'cropxy_'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'_'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">+</span>exten                    region <span class="token operator">=</span> im<span class="token punctuation">.</span>crop<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>width<span class="token punctuation">,</span>y<span class="token operator">+</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>                    region<span class="token punctuation">.</span>save<span class="token punctuation">(</span>crop_dir<span class="token punctuation">)</span>                    cropLen <span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">return</span> cropLen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++试卷</title>
      <link href="/2019/01/15/c-c-bian-cheng-ti/"/>
      <url>/2019/01/15/c-c-bian-cheng-ti/</url>
      
        <content type="html"><![CDATA[<p>2018-2019年本科考试编程题，记录一下，以便来年参考~</p><h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><h3 id="1、二进制转换"><a href="#1、二进制转换" class="headerlink" title="1、二进制转换"></a>1、二进制转换</h3><p>设计函数convert_number(int number ,int radius)，任意输入一个int型正整数（number）,对它进行二进制（radius为转换的进制数）转换，并输出转换后的数据。</p><blockquote>例如：<br>Please input the number：313<br>After binary conversion, the number is：100111001<br></blockquote><p><dfn><strong>程序如下：</strong></dfn></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token keyword">void</span> <span class="token function">Convert_number</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">,</span><span class="token keyword">int</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> number<span class="token operator">%</span>radius<span class="token punctuation">;</span>         number <span class="token operator">=</span> number<span class="token operator">/</span>radius<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token number">-1</span><span class="token punctuation">;</span>j <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> number<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"please input the number："</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>number<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"After binary conversion,the number is："</span><span class="token punctuation">;</span>     <span class="token function">Convert_number</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、简单二维数组"><a href="#2、简单二维数组" class="headerlink" title="2、简单二维数组"></a>2、简单二维数组</h3><p>输入一个4×4的二维数组，设计函数get_column_sum(int a[][4],int nRow)输出其中每一列的和？</p><blockquote>例如：<br>Please input 4 ×4 array:<br>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16<br>sum for column 1 is 28<br>sum for column 2 is 32<br>sum for column 3 is 36<br>sum for column 4 is 40</blockquote><p><dfn><strong>程序如下：</strong></dfn></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span> </span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> COLUMN_SIZE <span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> ROW_SIZE <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>COLUMN_SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>ROW_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">get_column_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>COLUMN_SIZE<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> nRow<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>col <span class="token operator">&lt;</span> COLUMN_SIZE<span class="token punctuation">;</span>col<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>row <span class="token operator">&lt;</span> nRow<span class="token punctuation">;</span>row<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            total <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"sum for column "</span><span class="token operator">&lt;&lt;</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">" is "</span><span class="token operator">&lt;&lt;</span>total<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"please input 4 ×4 array:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>j <span class="token operator">++</span><span class="token punctuation">)</span>            cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">get_column_sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、面向对象一"><a href="#3、面向对象一" class="headerlink" title="3、面向对象一"></a>3、面向对象一</h3><p>设计一个Student（学生）类，并使Student类具有以下特点：</p><ul><li>该类具有学生姓名（name）、学号（id）、高数（math）、程序设计（program）、英语（english）三门课程的成绩；</li><li>学生的所有信息通过键盘输入；</li><li>通过成员函数 get_totalScore() 统计学生三门课的总成绩；</li><li>通过成员函数 show_score() 输出学生的各种信息。<blockquote>例如：<br>Please input the information of student:<br>James 0001 90 95 100<br>The information of student is :<br>name    id      90      95      100     Total Score<br>James   0001    90      95      100     285</blockquote></li></ul><p><dfn><strong>程序如下：</strong></dfn></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span>using namespace std<span class="token punctuation">;</span>class Student<span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token function">Student</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span>string id<span class="token punctuation">,</span><span class="token keyword">float</span> math<span class="token punctuation">,</span><span class="token keyword">float</span> program<span class="token punctuation">,</span><span class="token keyword">float</span> english<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        this<span class="token operator">-></span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        this<span class="token operator">-></span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        this<span class="token operator">-></span>math <span class="token operator">=</span> math<span class="token punctuation">;</span>        this<span class="token operator">-></span>program <span class="token operator">=</span>program<span class="token punctuation">;</span>        this<span class="token operator">-></span>english <span class="token operator">=</span> english<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">float</span> <span class="token function">get_totalScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">show_score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>private<span class="token punctuation">:</span>    string name<span class="token punctuation">;</span>    string id<span class="token punctuation">;</span>    <span class="token keyword">float</span> math<span class="token punctuation">;</span>    <span class="token keyword">float</span> program<span class="token punctuation">;</span>    <span class="token keyword">float</span> english<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">float</span> Student<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get_totalScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> math<span class="token operator">+</span>program<span class="token operator">+</span>english<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Student<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">show_score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"the information of student is:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     cout<span class="token operator">&lt;&lt;</span><span class="token string">"name"</span><span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span><span class="token string">"id"</span><span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span>math<span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span>program<span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span>english<span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span><span class="token string">"Total Score"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>name<span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span>id<span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span>math<span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span>program<span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span>english<span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span><span class="token function">get_totalScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string name<span class="token punctuation">,</span>id<span class="token punctuation">;</span>    <span class="token keyword">float</span> math<span class="token punctuation">,</span>program<span class="token punctuation">,</span>english<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Please input the information of stident:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     cin<span class="token operator">>></span>name<span class="token operator">>></span>id<span class="token operator">>></span>math<span class="token operator">>></span>program<span class="token operator">>></span>english<span class="token punctuation">;</span>    Student <span class="token function">st</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>id<span class="token punctuation">,</span>math<span class="token punctuation">,</span>program<span class="token punctuation">,</span>english<span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">show_score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、面向对象二"><a href="#4、面向对象二" class="headerlink" title="4、面向对象二"></a>4、面向对象二</h3><p>定义一个日期类Date，并使得该类具有如下特点：</p><ul><li>该类包含年（year），月（month），日（day）三个public的数据成员；</li><li>通过键盘输入今天的日期: year  month  day；</li><li>通过成员函数 get_nextday()，计算明天的日期；</li><li>通过成员函数 display() 分别显示今天的日期、明天的日期。<br><blockquote>例如：<br>Please input today’s date :year month day :<br>2018 2 28<br>Today is ：2018-2-28<br>Tomorrow is ：2018-3-1</blockquote><br><dfn><strong>程序如下：</strong></dfn></li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span>class Date<span class="token punctuation">{</span>    private<span class="token punctuation">:</span>         <span class="token keyword">int</span> year<span class="token punctuation">,</span>month<span class="token punctuation">,</span>day<span class="token punctuation">;</span>    public<span class="token punctuation">:</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span><span class="token keyword">int</span> month<span class="token punctuation">,</span><span class="token keyword">int</span> day<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        this<span class="token operator">-></span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>        this<span class="token operator">-></span>month <span class="token operator">=</span> month<span class="token punctuation">;</span>        this<span class="token operator">-></span>day <span class="token operator">=</span> day<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">get_nextday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> Date<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get_nextday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> totaldays<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span>         <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    day <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> leap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year<span class="token operator">%</span><span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>day <span class="token operator">></span> totaldays<span class="token punctuation">[</span>leap<span class="token punctuation">]</span><span class="token punctuation">[</span>month<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        month <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>month <span class="token operator">></span> <span class="token number">12</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>            month <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            year <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">void</span> Date<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span>year<span class="token operator">&lt;&lt;</span><span class="token string">"-"</span><span class="token operator">&lt;&lt;</span>month<span class="token operator">&lt;&lt;</span><span class="token string">"-"</span><span class="token operator">&lt;&lt;</span>day<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> year<span class="token punctuation">,</span>month<span class="token punctuation">,</span>day<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Please input 'year' 'month' 'day' :"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cin<span class="token operator">>></span>year<span class="token operator">>></span>month<span class="token operator">>></span>day<span class="token punctuation">;</span>    Date <span class="token function">d</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span>month<span class="token punctuation">,</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Today is ："</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span><span class="token function">get_nextday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Tomorrow is ："</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、面向对象三"><a href="#5、面向对象三" class="headerlink" title="5、面向对象三"></a>5、面向对象三</h3><p>设计一个抽象类Shape，在Shape类的基础之上派生出Circle（圆）类和Rectangle（矩形）类，要求：</p><ul><li>使用纯虚函数实现，即在Shape类中定义虚函数get_area()、get_perimeter()；</li><li>Circle类具有private 属性radius（半径），Rectangle类具有private属性length 、width（长，宽）；</li><li>在Circle类和Rectangle类中分别实现求面积get_area()、求周长get_perimeter()的函数；</li><li>输出 半径为4 的圆的周长和面积，长为4，宽为5的矩形周长和面积。<blockquote>例如：<br>半径为4的圆的面积为50.24, 周长为25.12<br>长为5 宽为 4 的矩形面积为20, 周长为18</blockquote></li></ul><p><dfn><strong>程序如下：</strong></dfn></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>class Shape<span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token function">Shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    virtual <span class="token keyword">double</span> <span class="token function">get_area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    virtual <span class="token keyword">double</span> <span class="token function">get_perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>class Circle<span class="token punctuation">:</span>public Shape<span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token function">Circle</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">Shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        this<span class="token operator">-></span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">double</span> <span class="token function">get_area</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> pi<span class="token operator">*</span>a<span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">double</span> <span class="token function">get_perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> pi<span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>private<span class="token punctuation">:</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>class Rectangle<span class="token punctuation">:</span>public Shape<span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">Shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        this<span class="token operator">-></span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>        this<span class="token operator">-></span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">double</span> <span class="token function">get_area</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">double</span> <span class="token function">get_perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>private<span class="token punctuation">:</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">displayShapeObject</span><span class="token punctuation">(</span>Shape <span class="token operator">*</span>object<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"面积为："</span><span class="token operator">&lt;&lt;</span>object<span class="token operator">-></span><span class="token function">get_area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"周长为："</span><span class="token operator">&lt;&lt;</span>object<span class="token operator">-></span><span class="token function">get_perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Shape <span class="token operator">*</span>object<span class="token punctuation">;</span>    Circle <span class="token function">circle</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    object <span class="token operator">=</span> <span class="token operator">&amp;</span>circle<span class="token punctuation">;</span>     cout<span class="token operator">&lt;&lt;</span><span class="token string">"半径为4的圆的面积为："</span><span class="token operator">&lt;&lt;</span>object<span class="token operator">-></span><span class="token function">get_area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">",周长为："</span><span class="token operator">&lt;&lt;</span>object<span class="token operator">-></span><span class="token function">get_perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    Rectangle <span class="token function">rectangle</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    object <span class="token operator">=</span> <span class="token operator">&amp;</span>rectangle<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"长为5宽为4的矩形面积为："</span><span class="token operator">&lt;&lt;</span>object<span class="token operator">-></span><span class="token function">get_area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">",周长为："</span><span class="token operator">&lt;&lt;</span>object<span class="token operator">-></span><span class="token function">get_perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//displayShapeObject(&amp;circle);</span>    <span class="token comment" spellcheck="true">//displayShapeObject(&amp;rectangle);</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、蛇形矩阵"><a href="#6、蛇形矩阵" class="headerlink" title="6、蛇形矩阵"></a>6、蛇形矩阵</h3><p>蛇形矩阵n×n，要求：<br>输入矩阵的维度n，输出如下图形。</p><p><blockquote>例如：<br>Please input the dimension of the matrix：5<br><img src="/images/c/c.png" alt=""> </blockquote><br><dfn><strong>程序如下：</strong></dfn></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span> </span>using namespace std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> maxn 20</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input the dimension of the matrix："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//初始化数组</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    tot<span class="token operator">=</span>a<span class="token punctuation">[</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tot<span class="token operator">&lt;</span>n<span class="token operator">*</span>n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>tot<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>a<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span><span class="token operator">++</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>tot<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>y<span class="token number">-1</span><span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">--</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>tot<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>a<span class="token punctuation">[</span>x<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span><span class="token operator">--</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>tot<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>y<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0-1背包</title>
      <link href="/2019/01/14/suan-fa-0-1-bei-bao/"/>
      <url>/2019/01/14/suan-fa-0-1-bei-bao/</url>
      
        <content type="html"><![CDATA[<p>背包问题是本科时候竞赛经常遇到的一个问题，包括0-1背包、完全背包问题、多重背包问题，今天正好准备算法期末考试，就此机会回忆一下0-1背包问题。</p><h2 id="0-1-背包问题"><a href="#0-1-背包问题" class="headerlink" title="0-1 背包问题"></a>0-1 背包问题</h2><h3 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h3><blockquote> 有N件物品，和一个容量为V的背包，第i件物品的费用是c[i]，价值是w[i],问将哪些物品装入背包可使价值总和最大。<br>注意：这是最基本的背包问题，特点就是每件物品仅有意见，可以选择放还是不放</blockquote><h3 id="2、状态转移方程"><a href="#2、状态转移方程" class="headerlink" title="2、状态转移方程"></a>2、状态转移方程</h3><blockquote>f[i][v] = max{f[i-1][v],f[i-1][v-c[i]] + w[i]<br>含义就是：将前i件物品放入容量为v的背包中可获得的最大价值</blockquote><p><strong>基本所有的背包问题都是由这个方程演变过来的。</strong><br>这个方程可以这样来理解：将前 i 件物品放入容量为 v 的背包中”这个子问题，若只考虑第 i个物品的策略（放或不放），那么就可以转化为一个只牵扯前i-1件物品的问题。</p><ul><li><strong>如果不放第i件物品</strong>：那么问题就转化为“前 i-1 件物 品放入容量为 v 的背包中”，价值为 f[i-1][v]；</li><li><strong>如果放第i件物品</strong>：那么问题就转化为“前 i-1 件物品放入剩下的容量为 v-c[i]的背包中”，此时能获得的最大价值就是 f[i-1][v-c[i]]再加上通过放入第 i 件物品获得的价值w[i]。<br><code>请注意：</code><br>在最优解的背包问题中，事实上有两种不太相同的问法，一种是要求“恰好装满背包时”的最优解，有的则是没有要求必须将背包装满，区别这种问法的实现方法就是在初始化的时候有所不同。</li><li><strong>第一种：</strong>要求恰好装满背包，那么在初始化时除了 f[0]为 0 其它 f[1..V]均设为 -∞。</li><li><strong>第二种：</strong>没要求恰好装满背包，只希望价格大，初始化时应该f[1..V]均设为0。</li></ul><h3 id="3、实例"><a href="#3、实例" class="headerlink" title="3、实例"></a>3、实例</h3><p><strong>问题描述：</strong> 已知知道了N块石头的体积和价值，有一个最多能装体积为V的石头的袋子，从N块石头中找出一些石头放在袋子里使得总价值最大，求出最大价值。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">struct</span> A<span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//价值</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//体积</span><span class="token punctuation">}</span>E<span class="token punctuation">[</span><span class="token number">1011</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token punctuation">:</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">1011</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> N<span class="token punctuation">,</span>V<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>E<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>E<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果这里问的是问恰好装满背包，则不能这样初始化。</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span>V<span class="token punctuation">;</span>l<span class="token operator">>=</span>E<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>l<span class="token operator">--</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>l<span class="token operator">-</span>E<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">+</span>E<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 0-1背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回归博客</title>
      <link href="/2019/01/13/sui-bi-hui-gui-bo-ke/"/>
      <url>/2019/01/13/sui-bi-hui-gui-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>这是我正式搭建好博客之后自己写的第一篇文章，因为最近事情比较多，帮老师写专利，调代码，准备期末考试，但是还是在百忙之中，抽取了一丁点的时间，按照热心网友给出的模板，自己搭了一个简单的博客，也了却了我的的一桩心事。</p><h2 id="正式回归博客啦！！！"><a href="#正式回归博客啦！！！" class="headerlink" title="正式回归博客啦！！！"></a>正式回归博客啦！！！</h2><hr><h3 id="1、源头"><a href="#1、源头" class="headerlink" title="1、源头"></a>1、源头</h3><p>大二的时候，松哥就跟我说着要搭建一个属于自己的技术博客，当时的时候，开始喜欢编程，接触Java,还有各种Web编程，确实知识点比较多，也比较松散，word，思维导图各种笔记都曾记过，也使用过很多的云笔记，微软的OneNote，印象笔记，有道云等到处都留下了我的印记，但是终究不能带来最佳的体验效果。</p><p>上了研究生之后，看的文献越来越多，接触的编程语言也越来越多，各种框架层出不穷，用有道云来做简单的论文笔记勉强还是过得去，但是看起来也不是很方便，尤其是在手机端，总是有种似曾相识，但是还是得上网百度。为此，<a href="https://blog.csdn.net/HaoTheAnswer" target="_blank" rel="noopener">CSDN</a>上我也会经常用来收藏很多网上大牛的文章，但是其排版又过于丑陋，而且有些文章有时还会给你删除，很烦躁。目前市面上也就只有博客园和简书在这方面做的比较好，但是终归不是属于自己的，所以说，想法是早就有，总是一拖再拖。</p><p>终于，实验室小雨姐姐给他推荐了他的博客，我就上了她的博客来看看，确实效果还是挺不错的，上面看到了她姐姐的一个<a href="http://ariel-cheng.github.io/2017/04/23/Internship-experience/" target="_blank" rel="noopener">实习总结</a>，拥有自己的博客不管是对自己还是对别人来说都是百利而无一害的。 所以，花了两天时间，先学会了在github的各种使用，然后开始基于Hexo来建立自己的博客，在阿里云注册了一个域名，然后就搭起来了。</p><h3 id="2、近期计划"><a href="#2、近期计划" class="headerlink" title="2、近期计划"></a>2、近期计划</h3><p>近期可能事情比较多，所以不天可能将所有以前的笔记啥的都移植到现在这个博客上，所以打算就是利用寒假的时间，将大学四年和研一上半年的所有笔记进行一个整理，能做多少就做多少吧，总体的思路还是想分为几个大的模块：</p><h4 id="2-1-编程"><a href="#2-1-编程" class="headerlink" title="2.1 编程"></a>2.1 编程</h4><p>这方面主要涉及自己学过的几门语言，Java，C/C++，Python语言，主要重点是现在接触的比较多的Python语言，还有一些热门的框架，像Pytorch，TensorFlow、MXNet等等，因为这些知识点很零散，也不是说一下子就能够全部碰到。最重要的，也是很容易忘记的，可能就是一些核心的算法，像本科学习的一些算法， 现在接触的有关ML、DL、CV的算法，这些也应该被当做是学习的重点，所以肯定会是一个长期的过程。</p><h4 id="2-2-论文"><a href="#2-2-论文" class="headerlink" title="2.2 论文"></a>2.2 论文</h4><p>这个方面自然是不用说了，每周都有专门的汇报工作，每周自己也会看一些论文的，这在研一上半年就做了，后期将会将相关的论文笔记进行一个整理，进行上传。</p><h4 id="2-3-项目"><a href="#2-3-项目" class="headerlink" title="2.3 项目"></a>2.3 项目</h4><p>这个方面是自己的薄弱的环节，本科做的项目不多，就那么三四个，后期修改后会将他们传到github上，当然包括自己毕业设计做的东西。研究生的话， 目前是想将平时自己做过的实验进行上传，包括超分辨率和目标检测相关的一些项目，我想，这对自己以后面试工作肯定也会是有用的吧，虽然还没有确定是继续深造还是研究生后就找工作。</p><h4 id="2-3-课程"><a href="#2-3-课程" class="headerlink" title="2.3 课程"></a>2.3 课程</h4><p>这方面，主要想记录的就是自己现在长期接触的，像机器学习，深度学习，数学的相关知识，当然也会包括自己平时看英语的一些总结吧。至于本科相关的课程，我只会选择性碰到了才会去记录一下，不太可能将他们再一一上传了。</p><h4 id="2-4-随笔"><a href="#2-4-随笔" class="headerlink" title="2.4 随笔"></a>2.4 随笔</h4><p>这个就是要看自己的心情了，大学之前，自己都一直有写日记的习惯，反倒是社交软件多了之后，反而很少写了，也就是偶尔会在空间里写写日志，毕竟有些私密性的东西，，，对吧！！不过这个我还在想，应该会设置一个权限，应该是有办法解决的。每一个开心和不开心的瞬间以后都会在这里一一呈现的。</p><h3 id="3、未来。。。"><a href="#3、未来。。。" class="headerlink" title="3、未来。。。"></a>3、未来。。。</h3><p>未来有点远，没想太多，，，想到了再来补充吧~~</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
